{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "# This API provide access to FACEIT's data",
        "title": "Data API",
        "license": {
            "name": "Property of FACEIT LTD"
        },
        "version": "4"
    },
    "host": "open.faceit.com",
    "basePath": "/data/v4",
    "paths": {
        "/championships": {
            "get": {
                "description": "Retrieve all championships of a game",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Championships"
                ],
                "summary": "Retrieve all championships of a game",
                "operationId": "getChampionships",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the game",
                        "name": "game",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "all",
                            "upcoming",
                            "ongoing",
                            "past"
                        ],
                        "type": "string",
                        "description": "Kind of matches to return. Can be all(default), upcoming, ongoing or past",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Championships list",
                        "schema": {
                            "$ref": "#/definitions/ChampionshipsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/championships/{championship_id}": {
            "get": {
                "description": "Retrieve championship details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Championships"
                ],
                "summary": "Retrieve championship details",
                "operationId": "getChampionship",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the championship",
                        "name": "championship_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "enum": [
                                "organizer",
                                "game"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of entity names to expand in request",
                        "name": "expanded",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Championship details",
                        "schema": {
                            "$ref": "#/definitions/Championship"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/championships/{championship_id}/matches": {
            "get": {
                "description": "Retrieve all matches of a championship",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Championships"
                ],
                "summary": "Retrieve all matches of a championship",
                "operationId": "getChampionshipMatches",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the championship",
                        "name": "championship_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "all",
                            "upcoming",
                            "ongoing",
                            "past"
                        ],
                        "type": "string",
                        "description": "Kind of matches to return. Can be all(default), upcoming, ongoing or past",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Matches list",
                        "schema": {
                            "$ref": "#/definitions/MatchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/championships/{championship_id}/results": {
            "get": {
                "description": "Retrieve all results of a championship",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Championships"
                ],
                "summary": "Retrieve all results of a championship",
                "operationId": "getChampionshipResults",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the championship",
                        "name": "championship_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Championship results",
                        "schema": {
                            "$ref": "#/definitions/ChampionshipResultList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/championships/{championship_id}/subscriptions": {
            "get": {
                "description": "Retrieve all subscriptions of a championship",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Championships"
                ],
                "summary": "Retrieve all subscriptions of a championship",
                "operationId": "getChampionshipSubscriptions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the championship",
                        "name": "championship_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscriptions list",
                        "schema": {
                            "$ref": "#/definitions/ChampionshipSubscriptionsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/games": {
            "get": {
                "description": "Retrieve details of all games on FACEIT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve details of all games on FACEIT",
                "operationId": "getAllGames",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Games list",
                        "schema": {
                            "$ref": "#/definitions/GamesList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/games/{gameId}/matchmakings": {
            "get": {
                "description": "Retrieve details of all matchmakings of a game on FACEIT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve details of all matchmakings of a game on FACEIT",
                "operationId": "getGameMatchmakings",
                "parameters": [
                    {
                        "type": "string",
                        "example": "cs2",
                        "description": "The id of the game",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "EU",
                        "description": "The region of the matchmakings",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Matchmakings list",
                        "schema": {
                            "$ref": "#/definitions/MatchmakingList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/games/{game_id}": {
            "get": {
                "description": "Retrieve game details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve game details",
                "operationId": "getGame",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the game",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game detail",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/games/{game_id}/parent": {
            "get": {
                "description": "Retrieve the details of the parent game, if the game is region-specific",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve the details of the parent game, if the game is region-specific",
                "operationId": "getParentGame",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the game",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game detail",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/games/{game_id}/queues": {
            "get": {
                "description": "Retrieve queues by filters on FACEIT. Available only for game developers and queue owners(organizers)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve queues by filters on FACEIT",
                "operationId": "getQueuesByEntityFilters",
                "parameters": [
                    {
                        "type": "string",
                        "example": "csgo",
                        "description": "The id of the game",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "hub",
                        "description": "The type of the entity",
                        "name": "entity_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the entity",
                        "name": "entity_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Queues list",
                        "schema": {
                            "$ref": "#/definitions/QueuesList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/games/{game_id}/queues/{queue_id}": {
            "get": {
                "description": "Retrieve details of a queue on FACEIT. Available only for game or queue owners(organizers)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve details of a queue on FACEIT",
                "operationId": "getQueueById",
                "parameters": [
                    {
                        "type": "string",
                        "example": "cs2",
                        "description": "The id of the game",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the queue",
                        "name": "queue_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Queue",
                        "schema": {
                            "$ref": "#/definitions/Queue"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/games/{game_id}/queues/{queue_id}/bans": {
            "get": {
                "description": "Retrieve queue bans on FACEIT. Available only for game or queue owners(organizers)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve queue bans on FACEIT",
                "operationId": "getQueueBans",
                "parameters": [
                    {
                        "type": "string",
                        "example": "eu",
                        "description": "The id of the game",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the queue",
                        "name": "queue_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bans list",
                        "schema": {
                            "$ref": "#/definitions/QueueBansList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/games/{game_id}/regions/{region_id}/queues": {
            "get": {
                "description": "Retrieve queues by region on FACEIT. Available only for game developers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve queues by region on FACEIT",
                "operationId": "getQueuesByRegion",
                "parameters": [
                    {
                        "type": "string",
                        "example": "csgo",
                        "description": "The id of the game",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "eu",
                        "description": "The id of the region",
                        "name": "region_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Queues list",
                        "schema": {
                            "$ref": "#/definitions/QueuesList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/hubs/{hub_id}": {
            "get": {
                "description": "Retrieve hub details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hubs"
                ],
                "summary": "Retrieve hub details",
                "operationId": "getHub",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the hub",
                        "name": "hub_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "enum": [
                                "organizer",
                                "game"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of entity names to expand in request",
                        "name": "expanded",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hub details",
                        "schema": {
                            "$ref": "#/definitions/Hub"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/hubs/{hub_id}/matches": {
            "get": {
                "description": "Retrieve all matches of a hub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hubs"
                ],
                "summary": "Retrieve all matches of a hub",
                "operationId": "getHubMatches",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the hub",
                        "name": "hub_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "all",
                            "upcoming",
                            "ongoing",
                            "past"
                        ],
                        "type": "string",
                        "description": "Kind of matches to return. Can be all(default), upcoming, ongoing or past",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Matches list",
                        "schema": {
                            "$ref": "#/definitions/MatchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/hubs/{hub_id}/members": {
            "get": {
                "description": "Retrieve all members of a hub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hubs"
                ],
                "summary": "Retrieve all members of a hub",
                "operationId": "getHubMembers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the hub",
                        "name": "hub_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 1000,
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Members list",
                        "schema": {
                            "$ref": "#/definitions/HubMembers"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/hubs/{hub_id}/roles": {
            "get": {
                "description": "Retrieve all roles members can have in a hub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hubs"
                ],
                "summary": "Retrieve all roles members can have in a hub",
                "operationId": "getHubRoles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the hub",
                        "name": "hub_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 1000,
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles list",
                        "schema": {
                            "$ref": "#/definitions/RolesList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/hubs/{hub_id}/rules": {
            "get": {
                "description": "Retrieve rules of a hub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hubs"
                ],
                "summary": "Retrieve rules of a hub",
                "operationId": "getHubRules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the hub",
                        "name": "hub_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rules details",
                        "schema": {
                            "$ref": "#/definitions/Rules"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/hubs/{hub_id}/stats": {
            "get": {
                "description": "Retrieve statistics of a hub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Hubs"
                ],
                "summary": "Retrieve statistics of a hub",
                "operationId": "getHubStats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the hub",
                        "name": "hub_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hub stats",
                        "schema": {
                            "$ref": "#/definitions/HubStats"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leaderboards/championships/{championship_id}": {
            "get": {
                "description": "Retrieve all leaderboards of a championship",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leaderboards"
                ],
                "summary": "Retrieve all leaderboards of a championship",
                "operationId": "getChampionshipLeaderboards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the championship",
                        "name": "championship_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Leaderboards list",
                        "schema": {
                            "$ref": "#/definitions/LeaderboardsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leaderboards/championships/{championship_id}/groups/{group}": {
            "get": {
                "description": "Retrieve group ranking of a championship",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leaderboards"
                ],
                "summary": "Retrieve group ranking of a championship",
                "operationId": "getChampionshipGroupRanking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the championship",
                        "name": "championship_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "A group of the championship",
                        "name": "group",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Championship ranking",
                        "schema": {
                            "$ref": "#/definitions/EntityRanking"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leaderboards/hubs/{hub_id}": {
            "get": {
                "description": "Retrieve all leaderboards of a hub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leaderboards"
                ],
                "summary": "Retrieve all leaderboards of a hub",
                "operationId": "getHubLeaderboards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the hub",
                        "name": "hub_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Leaderboards list",
                        "schema": {
                            "$ref": "#/definitions/LeaderboardsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leaderboards/hubs/{hub_id}/general": {
            "get": {
                "description": "Retrieve all time ranking of a hub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leaderboards"
                ],
                "summary": "Retrieve all time ranking of a hub",
                "operationId": "getHubRanking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the hub",
                        "name": "hub_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hub ranking",
                        "schema": {
                            "$ref": "#/definitions/EntityRanking"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leaderboards/hubs/{hub_id}/seasons/{season}": {
            "get": {
                "description": "Retrieve seasonal ranking of a hub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leaderboards"
                ],
                "summary": "Retrieve seasonal ranking of a hub",
                "operationId": "getHubSeasonRanking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the hub",
                        "name": "hub_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "A season of the hub",
                        "name": "season",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hub ranking",
                        "schema": {
                            "$ref": "#/definitions/EntityRanking"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leaderboards/{leaderboard_id}": {
            "get": {
                "description": "Retrieve ranking from a leaderboard id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leaderboards"
                ],
                "summary": "Retrieve ranking from a leaderboard id",
                "operationId": "getLeaderboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the leaderboard",
                        "name": "leaderboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Competition ranking",
                        "schema": {
                            "$ref": "#/definitions/EntityRanking"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leaderboards/{leaderboard_id}/players/{player_id}": {
            "get": {
                "description": "Retrieve a players ranking in a leaderboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leaderboards"
                ],
                "summary": "Retrieve a players ranking in a leaderboard",
                "operationId": "getPlayerRankingInLeaderboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the leaderboard",
                        "name": "leaderboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ranking of the player in the leaderboard",
                        "schema": {
                            "$ref": "#/definitions/Ranking"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leagues/{league_id}": {
            "get": {
                "description": "Retrieve details of a league of a matchmaking on FACEIT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leagues"
                ],
                "summary": "Retrieve details of a league of a matchmaking on FACEIT",
                "operationId": "getLeagueById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the league",
                        "name": "league_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "League details",
                        "schema": {
                            "$ref": "#/definitions/League"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leagues/{league_id}/seasons/{season_id}": {
            "get": {
                "description": "Retrieve details of a season of a league on FACEIT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leagues"
                ],
                "summary": "Retrieve details of a season of a league on FACEIT",
                "operationId": "getLeagueSeason",
                "parameters": [
                    {
                        "type": "string",
                        "example": "6e7daaee-8b9d-4fbf-86c4-361fa7e579fc",
                        "description": "The id of the league",
                        "name": "league_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "The id of the season",
                        "name": "season_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Season details",
                        "schema": {
                            "$ref": "#/definitions/SeasonDetailed"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/leagues/{league_id}/seasons/{season_id}/players/{player_id}": {
            "get": {
                "description": "Retrieve details of a player for a given league and season on FACEIT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leagues"
                ],
                "summary": "Retrieve details of a player for a given league and season on FACEIT",
                "operationId": "getPlayerForLeagueSeason",
                "parameters": [
                    {
                        "type": "string",
                        "example": "6e7daaee-8b9d-4fbf-86c4-361fa7e579fc",
                        "description": "The id of the league",
                        "name": "league_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "The id of the season",
                        "name": "season_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "6e7daaee-8b9d-4fbf-86c4-361fa7e579fc",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player details",
                        "schema": {
                            "$ref": "#/definitions/PlayerInLeague"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/matches/{match_id}": {
            "get": {
                "description": "Retrieve match details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Matches"
                ],
                "summary": "Retrieve match details",
                "operationId": "getMatch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the match",
                        "name": "match_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Match details",
                        "schema": {
                            "$ref": "#/definitions/Match"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/matches/{match_id}/stats": {
            "get": {
                "description": "Retrieve statistics of a match",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Matches"
                ],
                "summary": "Retrieve statistics of a match",
                "operationId": "getMatchStats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the match",
                        "name": "match_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Match stats",
                        "schema": {
                            "$ref": "#/definitions/MatchStats"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/matchmakings/{matchmaking_id}": {
            "get": {
                "description": "Retrieve details of a matchmaking of a game on FACEIT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Matchmakings"
                ],
                "summary": "Retrieve details of a matchmaking of a game on FACEIT",
                "operationId": "getMatchmaking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the matchmaking",
                        "name": "matchmaking_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Matchmaking",
                        "schema": {
                            "$ref": "#/definitions/Matchmaking"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/organizers": {
            "get": {
                "description": "Retrieve organizer details from name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizers"
                ],
                "summary": "Retrieve organizer details from name",
                "operationId": "getOrganizerByName",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the organizer",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organizer details",
                        "schema": {
                            "$ref": "#/definitions/Organizer"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/organizers/{organizer_id}": {
            "get": {
                "description": "Retrieve organizer details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizers"
                ],
                "summary": "Retrieve organizer details",
                "operationId": "getOrganizer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the organizer",
                        "name": "organizer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organizer details",
                        "schema": {
                            "$ref": "#/definitions/Organizer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/organizers/{organizer_id}/championships": {
            "get": {
                "description": "Retrieve all championships of an organizer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizers"
                ],
                "summary": "Retrieve all championships of an organizer",
                "operationId": "getOrganizerChampionships",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the organizer",
                        "name": "organizer_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Championships list",
                        "schema": {
                            "$ref": "#/definitions/ChampionshipsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/organizers/{organizer_id}/games": {
            "get": {
                "description": "Retrieve all games an organizer is involved with",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizers"
                ],
                "summary": "Retrieve all games an organizer is involved with",
                "operationId": "getOrganizerGames",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the organizer",
                        "name": "organizer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Games list",
                        "schema": {
                            "$ref": "#/definitions/GamesList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/organizers/{organizer_id}/hubs": {
            "get": {
                "description": "Retrieve all hubs of an organizer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizers"
                ],
                "summary": "Retrieve all hubs of an organizer",
                "operationId": "getOrganizerHubs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the organizer",
                        "name": "organizer_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 1000,
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hubs list",
                        "schema": {
                            "$ref": "#/definitions/HubsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/organizers/{organizer_id}/tournaments": {
            "get": {
                "description": "Retrieve all tournaments of an organizer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizers"
                ],
                "summary": "Retrieve all tournaments of an organizer",
                "operationId": "getOrganizerTournaments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the organizer",
                        "name": "organizer_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "past",
                            "upcoming"
                        ],
                        "type": "string",
                        "description": "Kind of tournament. Can be upcoming(default) or past",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tournaments list",
                        "schema": {
                            "$ref": "#/definitions/TournamentsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/players": {
            "get": {
                "description": "Retrieve player details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Players"
                ],
                "summary": "Retrieve player details",
                "operationId": "getPlayerFromLookup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The nickname of the player on FACEIT",
                        "name": "nickname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The ID of a player on game's platform",
                        "name": "game_player_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player details",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/players/{player_id}": {
            "get": {
                "description": "Retrieve player details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Players"
                ],
                "summary": "Retrieve player details",
                "operationId": "getPlayer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player details",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/players/{player_id}/bans": {
            "get": {
                "description": "Retrieve all bans of a player",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Players"
                ],
                "summary": "Retrieve all bans of a player",
                "operationId": "getPlayerBans",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bans of a user",
                        "schema": {
                            "$ref": "#/definitions/PlayerBansList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/players/{player_id}/games/{game_id}/stats": {
            "get": {
                "description": "Retrieve statistics of a player for a given amount of matches",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Players"
                ],
                "summary": "Retrieve statistics of a player for a given amount of matches",
                "operationId": "getPlayerStats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "csgo",
                        "description": "A game on FACEIT",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player stats for matches",
                        "schema": {
                            "$ref": "#/definitions/PlayerStatsForMatchesList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/players/{player_id}/history": {
            "get": {
                "description": "Retrieve all matches of a player",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Players"
                ],
                "summary": "Retrieve all matches of a player",
                "operationId": "getPlayerHistory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The timestamp (Unix time) as lower bound of the query. 1 month ago if not specified",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The timestamp (Unix time) as higher bound of the query. Current timestamp if not specified",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player matches list",
                        "schema": {
                            "$ref": "#/definitions/MatchHistoryList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/players/{player_id}/hubs": {
            "get": {
                "description": "Retrieve all hubs of a player",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Players"
                ],
                "summary": "Retrieve all hubs of a player",
                "operationId": "getPlayerHubs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 1000,
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hubs list",
                        "schema": {
                            "$ref": "#/definitions/HubsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/players/{player_id}/stats/{game_id}": {
            "get": {
                "description": "Retrieve statistics of a player",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Players"
                ],
                "summary": "Retrieve statistics of a player",
                "operationId": "getPlayerStats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player stats",
                        "schema": {
                            "$ref": "#/definitions/PlayerStats"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/players/{player_id}/teams": {
            "get": {
                "description": "Retrieve all teams of a player",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Players"
                ],
                "summary": "Retrieve all teams of a player",
                "operationId": "getPlayerTeams",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Teams of a user",
                        "schema": {
                            "$ref": "#/definitions/TeamList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/players/{player_id}/tournaments": {
            "get": {
                "description": "Retrieve all tournaments of a player",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Players"
                ],
                "summary": "Retrieve all tournaments of a player",
                "operationId": "getPlayerTournaments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tournaments list",
                        "schema": {
                            "$ref": "#/definitions/TournamentsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/rankings/games/{game_id}/regions/{region}": {
            "get": {
                "description": "Retrieve global ranking of a game",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rankings"
                ],
                "summary": "Retrieve global ranking of a game",
                "operationId": "getGlobalRanking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the game",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A region of a game",
                        "name": "region",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A country code (ISO 3166-1)",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ranking",
                        "schema": {
                            "$ref": "#/definitions/GlobalRankingList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/rankings/games/{game_id}/regions/{region}/players/{player_id}": {
            "get": {
                "description": "Retrieve user position in the global ranking of a game",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rankings"
                ],
                "summary": "Retrieve user position in the global ranking of a game",
                "operationId": "getPlayerRanking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the game",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A region of a game",
                        "name": "region",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of a player",
                        "name": "player_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A country code (ISO 3166-1)",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ranking",
                        "schema": {
                            "$ref": "#/definitions/PlayerGlobalRanking"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/search/championships": {
            "get": {
                "description": "Search for championships",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search for championships",
                "operationId": "searchChampionships",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of a championship on FACEIT",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A region of the game",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "all",
                            "upcoming",
                            "ongoing",
                            "past"
                        ],
                        "type": "string",
                        "description": "Kind of competitions to return",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of championship",
                        "schema": {
                            "$ref": "#/definitions/CompetitionsSearchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/search/clans": {
            "get": {
                "description": "Search for clans",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search for clans",
                "operationId": "searchClans",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of a clan on FACEIT",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A region of the game",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of hub",
                        "schema": {
                            "$ref": "#/definitions/ClansSearchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/search/hubs": {
            "get": {
                "description": "Search for hubs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search for hubs",
                "operationId": "searchHubs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of a hub on FACEIT",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A region of the game",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of hub",
                        "schema": {
                            "$ref": "#/definitions/CompetitionsSearchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/search/organizers": {
            "get": {
                "description": "Search for organizers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search for organizers",
                "operationId": "searchOrganizers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of a organizer on FACEIT",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of organizers",
                        "schema": {
                            "$ref": "#/definitions/OrganizersSearchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/search/players": {
            "get": {
                "description": "Search for players",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search for players",
                "operationId": "searchPlayers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The nickname of a player on FACEIT",
                        "name": "nickname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A country code (ISO 3166-1)",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of players",
                        "schema": {
                            "$ref": "#/definitions/UsersSearchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/search/teams": {
            "get": {
                "description": "Search for teams",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search for teams",
                "operationId": "searchTeams",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The nickname of a team on FACEIT",
                        "name": "nickname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of teams",
                        "schema": {
                            "$ref": "#/definitions/TeamsSearchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/search/tournaments": {
            "get": {
                "description": "Search for tournaments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search for tournaments",
                "operationId": "searchTournaments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of a tournament on FACEIT",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A region of the game",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "all",
                            "upcoming",
                            "ongoing",
                            "past"
                        ],
                        "type": "string",
                        "description": "Kind of competitions to return",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tournament",
                        "schema": {
                            "$ref": "#/definitions/CompetitionsSearchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/teams/{team_id}": {
            "get": {
                "description": "Retrieve team details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teams"
                ],
                "summary": "Retrieve team details",
                "operationId": "getTeam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the team",
                        "name": "team_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team details",
                        "schema": {
                            "$ref": "#/definitions/Team"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/teams/{team_id}/stats/{game_id}": {
            "get": {
                "description": "Retrieve statistics of a team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teams"
                ],
                "summary": "Retrieve statistics of a team",
                "operationId": "getTeamStats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the team",
                        "name": "team_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team stats",
                        "schema": {
                            "$ref": "#/definitions/TeamStats"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/teams/{team_id}/tournaments": {
            "get": {
                "description": "Retrieve tournaments of a team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teams"
                ],
                "summary": "Retrieve tournaments of a team",
                "operationId": "getTeamTournaments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the team",
                        "name": "team_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tournaments list",
                        "schema": {
                            "$ref": "#/definitions/TournamentsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/tournaments": {
            "get": {
                "description": "Retrieve tournaments v1 (no longer used). Please refer to the Championships controller to retrieve tournaments v2",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tournaments"
                ],
                "summary": "Retrieve tournaments v1 (no longer used)",
                "operationId": "getTournamentsList",
                "parameters": [
                    {
                        "type": "string",
                        "description": "A game on FACEIT",
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A region of the game",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tournaments list",
                        "schema": {
                            "$ref": "#/definitions/TournamentsList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/tournaments/{tournament_id}": {
            "get": {
                "description": "Retrieve tournament details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tournaments"
                ],
                "summary": "Retrieve tournament details",
                "operationId": "getTournament",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the tournament",
                        "name": "tournament_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "enum": [
                                "organizer",
                                "game"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of entity names to expand in request",
                        "name": "expanded",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tournament details",
                        "schema": {
                            "$ref": "#/definitions/Tournament"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/tournaments/{tournament_id}/brackets": {
            "get": {
                "description": "Retrieve brackets of a tournament",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tournaments"
                ],
                "summary": "Retrieve brackets of a tournament",
                "operationId": "getTournamentBrackets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the tournament",
                        "name": "tournament_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rounds and matches list",
                        "schema": {
                            "$ref": "#/definitions/Brackets"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/tournaments/{tournament_id}/matches": {
            "get": {
                "description": "Retrieve all matches of a tournament",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tournaments"
                ],
                "summary": "Retrieve all matches of a tournament",
                "operationId": "getTournamentMatches",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the tournament",
                        "name": "tournament_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Matches list",
                        "schema": {
                            "$ref": "#/definitions/MatchList"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        },
        "/tournaments/{tournament_id}/teams": {
            "get": {
                "description": "Retrieve all teams of a tournament",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tournaments"
                ],
                "summary": "Retrieve all teams of a tournament",
                "operationId": "getTournamentTeams",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the tournament",
                        "name": "tournament_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "The starting item position",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "The number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Teams list",
                        "schema": {
                            "$ref": "#/definitions/TournamentTeams"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "503": {
                        "description": "Temporarily unavailable"
                    },
                    "default": {
                        "description": "Generic error"
                    }
                }
            }
        }
    },
    "definitions": {
        "AccessMode": {
            "type": "object",
            "title": "AccessMode defines the access mode of a volume.",
            "properties": {
                "BlockVolume": {
                    "$ref": "#/definitions/TypeBlock"
                },
                "MountVolume": {
                    "$ref": "#/definitions/TypeMount"
                },
                "Scope": {
                    "$ref": "#/definitions/Scope"
                },
                "Sharing": {
                    "$ref": "#/definitions/SharingMode"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "Address": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "x-go-name": "Address"
                },
                "city": {
                    "type": "string",
                    "x-go-name": "City"
                },
                "country": {
                    "type": "string",
                    "x-go-name": "Country"
                },
                "postcode": {
                    "type": "string",
                    "x-go-name": "Postcode"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "AlgorithmParameters": {
            "type": "object",
            "properties": {
                "band": {
                    "$ref": "#/definitions/Band"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Assets": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string",
                    "x-go-name": "Color"
                },
                "icon": {
                    "type": "string",
                    "x-go-name": "Icon"
                },
                "image": {
                    "type": "string",
                    "x-go-name": "Image"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "AuthenticateOKBody": {
            "description": "AuthenticateOKBody authenticate o k body",
            "type": "object",
            "required": [
                "IdentityToken",
                "Status"
            ],
            "properties": {
                "IdentityToken": {
                    "description": "An opaque token used to authenticate a user after a successful login",
                    "type": "string"
                },
                "Status": {
                    "description": "The status of the authentication",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/registry"
        },
        "Availability": {
            "type": "string",
            "title": "Availability specifies the availability of the volume.",
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "Band": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Value"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "BirthDate": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Date"
                },
                "month": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Month"
                },
                "year": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Year"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Brackets": {
            "type": "object",
            "properties": {
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BracketsMatch"
                    },
                    "x-go-name": "Matches"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "rounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BracketsRound"
                    },
                    "x-go-name": "Rounds"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "BracketsFaction": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "team_id": {
                    "type": "string",
                    "x-go-name": "ID"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "BracketsMatch": {
            "type": "object",
            "properties": {
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "match_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Position"
                },
                "results": {
                    "$ref": "#/definitions/MatchResult"
                },
                "round": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Round"
                },
                "state": {
                    "type": "string",
                    "x-go-name": "State"
                },
                "teams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/BracketsFaction"
                    },
                    "x-go-name": "Teams"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "BracketsRound": {
            "type": "object",
            "properties": {
                "best_of": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "BestOf"
                },
                "label": {
                    "type": "string",
                    "x-go-name": "Label"
                },
                "matches": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Matches"
                },
                "round": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Round"
                },
                "start_time": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "StartTime"
                },
                "starts_asap": {
                    "type": "boolean",
                    "x-go-name": "StartsAsap"
                },
                "substitution_time": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SubstitutionTime"
                },
                "substitutions_allowed": {
                    "type": "boolean",
                    "x-go-name": "SubstitutionsAllowed"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "CapacityRange": {
            "description": "CapacityRange describes the minimum and maximum capacity a volume should be\ncreated with",
            "type": "object",
            "properties": {
                "LimitBytes": {
                    "description": "LimitBytes specifies that a volume must not be bigger than this. The\nvalue of 0 indicates an unspecified maximum",
                    "type": "integer",
                    "format": "int64"
                },
                "RequiredBytes": {
                    "description": "RequiredBytes specifies that a volume must be at least this big. The\nvalue of 0 indicates an unspecified minimum.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "Championship": {
            "type": "object",
            "properties": {
                "anticheat_required": {
                    "type": "boolean",
                    "x-go-name": "AnticheatRequired"
                },
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "background_image": {
                    "type": "string",
                    "x-go-name": "BackgroundImage"
                },
                "championship_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "championship_start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "ChampionshipStart"
                },
                "checkin_clear": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "CheckinClear"
                },
                "checkin_enabled": {
                    "type": "boolean",
                    "x-go-name": "CheckinEnabled"
                },
                "checkin_start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "CheckinStart"
                },
                "cover_image": {
                    "type": "string",
                    "x-go-name": "CoverImage"
                },
                "current_subscriptions": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "CurrentSubscriptions"
                },
                "description": {
                    "type": "string",
                    "x-go-name": "Description"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "featured": {
                    "type": "boolean",
                    "x-go-name": "Featured"
                },
                "full": {
                    "type": "boolean",
                    "x-go-name": "Full"
                },
                "game_data": {
                    "$ref": "#/definitions/Game"
                },
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "id": {
                    "description": "Deprecated: use championship_id instead",
                    "type": "string",
                    "x-go-name": "IDdep"
                },
                "join_checks": {
                    "$ref": "#/definitions/JoinCheck"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "organizer_data": {
                    "$ref": "#/definitions/Organizer"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "OrganizerID"
                },
                "prizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Prize"
                    },
                    "x-go-name": "Prizes"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "rules_id": {
                    "type": "string",
                    "x-go-name": "RulesID"
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/ChampionshipSchedule"
                    },
                    "x-go-name": "Schedule"
                },
                "screening": {
                    "$ref": "#/definitions/ChampionshipScreening"
                },
                "seeding_strategy": {
                    "type": "string",
                    "x-go-name": "SeedingStrategy"
                },
                "slots": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Slots"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                },
                "stream": {
                    "$ref": "#/definitions/ChampionshipStream"
                },
                "subscription_end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SubscriptionEnd"
                },
                "subscription_start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SubscriptionStart"
                },
                "subscriptions_locked": {
                    "type": "boolean",
                    "x-go-name": "SubscriptionsLocked"
                },
                "substitution_configuration": {
                    "$ref": "#/definitions/SubstitutionConfiguration"
                },
                "total_groups": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "TotalGroups"
                },
                "total_prizes": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "TotalPrizes"
                },
                "total_rounds": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "TotalRounds"
                },
                "type": {
                    "type": "string",
                    "x-go-name": "Type"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipBounds": {
            "type": "object",
            "properties": {
                "left": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Left"
                },
                "right": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Right"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipPlacement": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "type": {
                    "type": "string",
                    "x-go-name": "Type"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipPlacementGroup": {
            "type": "object",
            "properties": {
                "bounds": {
                    "$ref": "#/definitions/ChampionshipBounds"
                },
                "placements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ChampionshipPlacement"
                    },
                    "x-go-name": "Placements"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipResultList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ChampionshipPlacementGroup"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipSchedule": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Date"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipScreening": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "x-go-name": "Enabled"
                },
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipStream": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "x-go-name": "Active"
                },
                "platform": {
                    "type": "string",
                    "x-go-name": "Platform"
                },
                "source": {
                    "type": "string",
                    "x-go-name": "Source"
                },
                "title": {
                    "type": "string",
                    "x-go-name": "Title"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipSubscription": {
            "type": "object",
            "properties": {
                "coach": {
                    "type": "string",
                    "x-go-name": "Coach"
                },
                "coleader": {
                    "type": "string",
                    "x-go-name": "Coleader"
                },
                "group": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Group"
                },
                "leader": {
                    "type": "string",
                    "x-go-name": "Leader"
                },
                "roster": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Roster"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                },
                "substitutes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Substitutes"
                },
                "team": {
                    "$ref": "#/definitions/Team"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipSubscriptionsList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ChampionshipSubscription"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ChampionshipsList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Championship"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "CheckIn": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Time"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ClanSearch": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "The clan's avatar url",
                    "type": "string",
                    "x-go-name": "Avatar",
                    "example": "https://faceit.com/images/example-clan-avatar.jpeg"
                },
                "game": {
                    "description": "The game of the clan",
                    "type": "string",
                    "x-go-name": "Game",
                    "example": "csgo"
                },
                "id": {
                    "description": "The id of the clan",
                    "type": "string",
                    "x-go-name": "Id",
                    "example": "22479709-2064-4688-80fa-f02e97412345"
                },
                "join": {
                    "description": "The clan's join type",
                    "type": "string",
                    "x-go-name": "Join",
                    "example": "invite"
                },
                "last_match_finished": {
                    "description": "The time the clan's last match finished",
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "LastMatchFinished"
                },
                "matches_count_24h": {
                    "description": "The clan's matches count in the last 24 hours",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MatchesCount24H",
                    "example": 3
                },
                "max_skill_level": {
                    "description": "The clan's maximum skill level",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxSkillLevel",
                    "example": 10
                },
                "members_count": {
                    "description": "The clan's members count",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MembersCount",
                    "example": 72300
                },
                "members_count_24h": {
                    "description": "The clan's members count in the last 24 hours",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MembersCount24H",
                    "example": 1
                },
                "min_skill_level": {
                    "description": "The clan's minimum skill level",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MinSkillLevel",
                    "example": 1
                },
                "name": {
                    "description": "The name of the clan",
                    "type": "string",
                    "x-go-name": "Name",
                    "example": "Example Clan"
                },
                "organizer_id": {
                    "description": "The clan's organizer id",
                    "type": "string",
                    "x-go-name": "OrganizerId",
                    "example": "f80900c9-88ef-43b4-aa97-d61ea3712345"
                },
                "region": {
                    "description": "The region of the clan",
                    "type": "string",
                    "x-go-name": "Region",
                    "example": "eu"
                },
                "type": {
                    "description": "The type of the clan",
                    "type": "string",
                    "x-go-name": "Type",
                    "example": "community"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ClansSearchList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ClanSearch"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ClusterVolume": {
            "description": "ClusterVolume contains options and information specific to, and only present\non, Swarm CSI cluster volumes.",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "ID": {
                    "description": "ID is the Swarm ID of the volume. Because cluster volumes are Swarm\nobjects, they have an ID, unlike non-cluster volumes, which only have a\nName. This ID can be used to refer to the cluster volume.",
                    "type": "string"
                },
                "Info": {
                    "$ref": "#/definitions/Info"
                },
                "PublishStatus": {
                    "description": "PublishStatus contains the status of the volume as it pertains to its\npublishing on Nodes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PublishStatus"
                    }
                },
                "Spec": {
                    "$ref": "#/definitions/ClusterVolumeSpec"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "Version": {
                    "$ref": "#/definitions/Version"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "ClusterVolumeSpec": {
            "type": "object",
            "title": "ClusterVolumeSpec contains the spec used to create this volume.",
            "properties": {
                "AccessMode": {
                    "$ref": "#/definitions/AccessMode"
                },
                "AccessibilityRequirements": {
                    "$ref": "#/definitions/TopologyRequirement"
                },
                "Availability": {
                    "$ref": "#/definitions/Availability"
                },
                "CapacityRange": {
                    "$ref": "#/definitions/CapacityRange"
                },
                "Group": {
                    "description": "Group defines the volume group of this volume. Volumes belonging to the\nsame group can be referred to by group name when creating Services.\nReferring to a volume by group instructs swarm to treat volumes in that\ngroup interchangeably for the purpose of scheduling. Volumes with an\nempty string for a group technically all belong to the same, emptystring\ngroup.",
                    "type": "string"
                },
                "Secrets": {
                    "description": "Secrets defines Swarm Secrets that are passed to the CSI storage plugin\nwhen operating on this volume.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Secret"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "CompetitionSearch": {
            "type": "object",
            "properties": {
                "competition_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "competition_type": {
                    "type": "string",
                    "x-go-name": "Type"
                },
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "number_of_members": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NumberOfMembers"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "OrganizerID"
                },
                "organizer_name": {
                    "type": "string",
                    "x-go-name": "OrganizerName"
                },
                "organizer_type": {
                    "type": "string",
                    "x-go-name": "OrganizerType"
                },
                "players_checkedin": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "PlayersCheckedIn"
                },
                "players_joined": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "PlayersJoined"
                },
                "prize_type": {
                    "description": "Tournaments",
                    "type": "string",
                    "x-go-name": "PrizeType"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "slots": {
                    "description": "Hubs",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Slots"
                },
                "started_at": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "StartedAt"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                },
                "total_prize": {
                    "type": "string",
                    "x-go-name": "TotalPrize"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "CompetitionsSearchList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CompetitionSearch"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ContainerChangeResponseItem": {
            "description": "ContainerChangeResponseItem change item in response to ContainerChanges operation",
            "type": "object",
            "required": [
                "Kind",
                "Path"
            ],
            "properties": {
                "Kind": {
                    "description": "Kind of change",
                    "type": "integer",
                    "format": "uint8"
                },
                "Path": {
                    "description": "Path to file that has changed",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/container"
        },
        "ContainerTopOKBody": {
            "description": "ContainerTopOKBody OK response to ContainerTop operation",
            "type": "object",
            "required": [
                "Processes",
                "Titles"
            ],
            "properties": {
                "Processes": {
                    "description": "Each process running in the container, where each is process\nis an array of values corresponding to the titles.",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "Titles": {
                    "description": "The ps column titles",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/container"
        },
        "ContainerUpdateOKBody": {
            "description": "ContainerUpdateOKBody OK response to ContainerUpdate operation",
            "type": "object",
            "required": [
                "Warnings"
            ],
            "properties": {
                "Warnings": {
                    "description": "warnings",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/container"
        },
        "CreateOptions": {
            "description": "Volume configuration",
            "type": "object",
            "title": "CreateOptions VolumeConfig",
            "properties": {
                "ClusterVolumeSpec": {
                    "$ref": "#/definitions/ClusterVolumeSpec"
                },
                "Driver": {
                    "description": "Name of the volume driver to use.",
                    "type": "string"
                },
                "DriverOpts": {
                    "description": "A mapping of driver options and values. These options are\npassed directly to the driver and are driver specific.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Labels": {
                    "description": "User-defined key/value metadata.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Name": {
                    "description": "The new volume's name. If not specified, Docker generates a name.",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "CreateResponse": {
            "description": "OK response to ContainerCreate operation",
            "type": "object",
            "title": "CreateResponse ContainerCreateResponse",
            "required": [
                "Id",
                "Warnings"
            ],
            "properties": {
                "Id": {
                    "description": "The ID of the created container",
                    "type": "string",
                    "x-go-name": "ID"
                },
                "Warnings": {
                    "description": "Warnings encountered when creating the container",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/container"
        },
        "DetailedMatchResult": {
            "description": "# DetailedMatchResult holds detailed match results",
            "type": "object",
            "title": "DetailedMatchResult Model",
            "properties": {
                "asc_score": {
                    "description": "True if the scores should be interpreted ascending (lower score wins)",
                    "type": "boolean",
                    "x-go-name": "AscScore",
                    "example": true
                },
                "factions": {
                    "description": "The factions of the match",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/FactionResult"
                    },
                    "x-go-name": "Factions"
                },
                "winner": {
                    "description": "The winner faction",
                    "type": "string",
                    "x-go-name": "Winner"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Division": {
            "type": "object",
            "properties": {
                "assets": {
                    "$ref": "#/definitions/Assets"
                },
                "config_type": {
                    "description": "The type of the division. Can be nested or classic. Nested means that the division has tiers, classic is without tiers.",
                    "type": "string",
                    "x-go-name": "ConfigType"
                },
                "leaderboard_config": {
                    "$ref": "#/definitions/LeaderboardConfig"
                },
                "leaderboards": {
                    "description": "The leaderboards of the division",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Leaderboards"
                },
                "max_elo": {
                    "description": "Max ELO for a user to be placed in this division after placement matches",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxElo"
                },
                "min_elo": {
                    "description": "Min ELO for a user to be placed in this division after placement matches",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MinElo"
                },
                "name": {
                    "description": "The name of the division.",
                    "type": "string",
                    "x-go-name": "Name"
                },
                "tiers": {
                    "description": "The tiers of the division",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tier"
                    },
                    "x-go-name": "Tiers"
                },
                "type": {
                    "description": "The type of the division.",
                    "type": "string",
                    "x-go-name": "Type"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "EntityRanking": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Ranking"
                    },
                    "x-go-name": "Items"
                },
                "leaderboard": {
                    "$ref": "#/definitions/Leaderboard"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ErrorResponse": {
            "type": "object",
            "title": "ErrorResponse Represents an error.",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "description": "The error message.",
                    "type": "string",
                    "x-go-name": "Message"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "Faction": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "faction_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "leader": {
                    "type": "string",
                    "x-go-name": "Leader"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "roster": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Roster"
                    },
                    "x-go-name": "Roster"
                },
                "roster_v1": {
                    "x-go-name": "RosterV1"
                },
                "stats": {
                    "$ref": "#/definitions/Stats"
                },
                "substituted": {
                    "type": "boolean",
                    "x-go-name": "Substituted"
                },
                "type": {
                    "type": "string",
                    "x-go-name": "Type"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "FactionResult": {
            "description": "# FactionResult holds detailed faction score",
            "type": "object",
            "title": "FactionResult Model",
            "properties": {
                "score": {
                    "description": "The score of the faction.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Score",
                    "example": 2
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Game": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "object",
                    "properties": {
                        "cover": {
                            "type": "string",
                            "x-go-name": "Cover"
                        },
                        "featured_img_l": {
                            "type": "string",
                            "x-go-name": "FeaturedImgL"
                        },
                        "featured_img_m": {
                            "type": "string",
                            "x-go-name": "FeaturedImgM"
                        },
                        "featured_img_s": {
                            "type": "string",
                            "x-go-name": "FeaturedImgS"
                        },
                        "flag_img_icon": {
                            "type": "string",
                            "x-go-name": "FlagImgIcon"
                        },
                        "flag_img_l": {
                            "type": "string",
                            "x-go-name": "FlagImgL"
                        },
                        "flag_img_m": {
                            "type": "string",
                            "x-go-name": "FlagImgM"
                        },
                        "flag_img_s": {
                            "type": "string",
                            "x-go-name": "FlagImgS"
                        },
                        "landing_page": {
                            "type": "string",
                            "x-go-name": "LandingPage"
                        }
                    },
                    "x-go-name": "Assets"
                },
                "game_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "long_label": {
                    "type": "string",
                    "x-go-name": "LongLabel"
                },
                "order": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Order"
                },
                "parent_game_id": {
                    "type": "string",
                    "x-go-name": "ParentGameID"
                },
                "platforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Platforms"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Regions"
                },
                "short_label": {
                    "type": "string",
                    "x-go-name": "ShortLabel"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "GameDetail": {
            "type": "object",
            "properties": {
                "faceit_elo": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "FaceitElo"
                },
                "game_player_id": {
                    "type": "string",
                    "x-go-name": "GamePlayerID"
                },
                "game_player_name": {
                    "type": "string",
                    "x-go-name": "GamePlayerName"
                },
                "game_profile_id": {
                    "description": "Deprecated: no more in use",
                    "type": "string",
                    "x-go-name": "GameProfileID"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "regions": {
                    "description": "Deprecated: no more in use",
                    "x-go-name": "Regions"
                },
                "skill_level": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SkillLevel"
                },
                "skill_level_label": {
                    "description": "Deprecated: use SkillLevel instead",
                    "type": "string",
                    "x-go-name": "SkillLevelLabel"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "GameUserSearch": {
            "description": "Here we return SkillLevel as string even if it is an int\nas we don't want to break the contract with devs",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "skill_level": {
                    "type": "string",
                    "x-go-name": "SkillLevel"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "GamesList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Game"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "GeoDescription": {
            "type": "object",
            "properties": {
                "en": {
                    "type": "string",
                    "x-go-name": "En"
                },
                "fr": {
                    "type": "string",
                    "x-go-name": "Fr"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "GeoLabel": {
            "type": "object",
            "properties": {
                "en": {
                    "type": "string",
                    "x-go-name": "En"
                },
                "fr": {
                    "type": "string",
                    "x-go-name": "Fr"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "GlobalRanking": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string",
                    "x-go-name": "Country"
                },
                "faceit_elo": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "FaceitElo"
                },
                "game_skill_level": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SkillLevel"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "player_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Position"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "GlobalRankingList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GlobalRanking"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "GraphDriverData": {
            "description": "GraphDriverData Information about the storage driver used to store the container's and\nimage's filesystem.",
            "type": "object",
            "required": [
                "Data",
                "Name"
            ],
            "properties": {
                "Data": {
                    "description": "Low-level storage metadata, provided as key/value pairs.\n\nThis information is driver-specific, and depends on the storage-driver\nin use, and should be used for informational purposes only.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Name": {
                    "description": "Name of the storage driver.",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "HistoryFaction": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MatchHistoryPlayer"
                    },
                    "x-go-name": "Players"
                },
                "team_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "type": {
                    "type": "string",
                    "x-go-name": "Type"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "HistoryResponseItem": {
            "description": "HistoryResponseItem individual image layer information in response to ImageHistory operation",
            "type": "object",
            "required": [
                "Comment",
                "Created",
                "CreatedBy",
                "Id",
                "Size",
                "Tags"
            ],
            "properties": {
                "Comment": {
                    "description": "comment",
                    "type": "string"
                },
                "Created": {
                    "description": "created",
                    "type": "integer",
                    "format": "int64"
                },
                "CreatedBy": {
                    "description": "created by",
                    "type": "string"
                },
                "Id": {
                    "description": "Id",
                    "type": "string",
                    "x-go-name": "ID"
                },
                "Size": {
                    "description": "size",
                    "type": "integer",
                    "format": "int64"
                },
                "Tags": {
                    "description": "tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/image"
        },
        "Hub": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "background_image": {
                    "type": "string",
                    "x-go-name": "BackgroundImage"
                },
                "chat_room_id": {
                    "type": "string",
                    "x-go-name": "ChatID"
                },
                "cover_image": {
                    "type": "string",
                    "x-go-name": "CoverImage"
                },
                "description": {
                    "type": "string",
                    "x-go-name": "Description"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "game_data": {
                    "$ref": "#/definitions/Game"
                },
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "hub_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "join_permission": {
                    "type": "string",
                    "x-go-name": "JoinPermission"
                },
                "max_skill_level": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxSkillLevel"
                },
                "min_skill_level": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MinSkillLevel"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "organizer_data": {
                    "$ref": "#/definitions/Organizer"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "OrganizerID"
                },
                "players_joined": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "PlayersJoined"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "rule_id": {
                    "type": "string",
                    "x-go-name": "RuleID"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "HubMembers": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HubUser"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "HubSmall": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "hub_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "OrganizerID"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "HubStats": {
            "type": "object",
            "properties": {
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StatsCompetitionPlayer"
                    },
                    "x-go-name": "Players"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "HubUser": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Roles"
                },
                "user_id": {
                    "type": "string",
                    "x-go-name": "ID"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "HubsList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Hub"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "HubsSmallList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HubSmall"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "IdResponse": {
            "description": "IDResponse Response to an API call that returns just an Id",
            "type": "object",
            "required": [
                "Id"
            ],
            "properties": {
                "Id": {
                    "description": "The id of the newly created object.",
                    "type": "string",
                    "x-go-name": "ID"
                }
            },
            "x-go-name": "IDResponse",
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "ImageDeleteResponseItem": {
            "description": "ImageDeleteResponseItem image delete response item",
            "type": "object",
            "properties": {
                "Deleted": {
                    "description": "The image ID of an image that was deleted",
                    "type": "string"
                },
                "Untagged": {
                    "description": "The image ID of an image that was untagged",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "ImageSummary": {
            "description": "ImageSummary image summary",
            "type": "object",
            "required": [
                "Containers",
                "Created",
                "Id",
                "Labels",
                "ParentId",
                "RepoDigests",
                "RepoTags",
                "SharedSize",
                "Size",
                "VirtualSize"
            ],
            "properties": {
                "Containers": {
                    "description": "Number of containers using this image. Includes both stopped and running\ncontainers.\n\nThis size is not calculated by default, and depends on which API endpoint\nis used. `-1` indicates that the value has not been set / calculated.",
                    "type": "integer",
                    "format": "int64"
                },
                "Created": {
                    "description": "Date and time at which the image was created as a Unix timestamp\n(number of seconds sinds EPOCH).",
                    "type": "integer",
                    "format": "int64"
                },
                "Id": {
                    "description": "ID is the content-addressable ID of an image.\n\nThis identifier is a content-addressable digest calculated from the\nimage's configuration (which includes the digests of layers used by\nthe image).\n\nNote that this digest differs from the `RepoDigests` below, which\nholds digests of image manifests that reference the image.",
                    "type": "string",
                    "x-go-name": "ID"
                },
                "Labels": {
                    "description": "User-defined key/value metadata.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ParentId": {
                    "description": "ID of the parent image.\n\nDepending on how the image was created, this field may be empty and\nis only set for images that were built/created locally. This field\nis empty if the image was pulled from an image registry.",
                    "type": "string",
                    "x-go-name": "ParentID"
                },
                "RepoDigests": {
                    "description": "List of content-addressable digests of locally available image manifests\nthat the image is referenced from. Multiple manifests can refer to the\nsame image.\n\nThese digests are usually only available if the image was either pulled\nfrom a registry, or if the image was pushed to a registry, which is when\nthe manifest is generated and its digest calculated.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "RepoTags": {
                    "description": "List of image names/tags in the local image cache that reference this\nimage.\n\nMultiple image tags can refer to the same image, and this list may be\nempty if no tags reference the image, in which case the image is\n\"untagged\", in which case it can still be referenced by its ID.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "SharedSize": {
                    "description": "Total size of image layers that are shared between this image and other\nimages.\n\nThis size is not calculated by default. `-1` indicates that the value\nhas not been set / calculated.",
                    "type": "integer",
                    "format": "int64"
                },
                "Size": {
                    "description": "Total size of the image including all layers it is composed of.",
                    "type": "integer",
                    "format": "int64"
                },
                "VirtualSize": {
                    "description": "Total size of the image including all layers it is composed of.\n\nIn versions of Docker before v1.10, this field was calculated from\nthe image itself and all of its parent images. Docker v1.10 and up\nstore images self-contained, and no longer use a parent-chain, making\nthis field an equivalent of the Size field.\n\nThis field is kept for backward compatibility, but may be removed in\na future version of the API.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "Info": {
            "description": "Info contains information about the Volume as a whole as provided by\nthe CSI storage plugin.",
            "type": "object",
            "properties": {
                "AccessibleTopology": {
                    "description": "AccessibleTopolgoy is the topology this volume is actually accessible\nfrom.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Topology"
                    }
                },
                "CapacityBytes": {
                    "description": "CapacityBytes is the capacity of the volume in bytes. A value of 0\nindicates that the capacity is unknown.",
                    "type": "integer",
                    "format": "int64"
                },
                "VolumeContext": {
                    "description": "VolumeContext is the context originating from the CSI storage plugin\nwhen the Volume is created.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "VolumeID": {
                    "description": "VolumeID is the ID of the Volume as seen by the CSI storage plugin. This\nis distinct from the Volume's Swarm ID, which is the ID used by all of\nthe Docker Engine to refer to the Volume. If this field is blank, then\nthe Volume has not been successfully created yet.",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "Item": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "x-go-name": "Category"
                },
                "country_blacklist": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "CountryBlacklist"
                },
                "country_whitelist": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "CountryWhitelist"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "CreatedAt"
                },
                "created_by": {
                    "type": "string",
                    "x-go-name": "CreatedBy"
                },
                "external_id": {
                    "description": "ExternalId refers to the ID of the item in a third-party shop",
                    "type": "string",
                    "x-go-name": "ExternalId"
                },
                "games": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Games"
                },
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                },
                "media": {
                    "$ref": "#/definitions/ItemMedia"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "new": {
                    "type": "boolean",
                    "x-go-name": "New"
                },
                "order_type": {
                    "type": "string",
                    "x-go-name": "OrderType"
                },
                "platforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Platforms"
                },
                "price": {
                    "type": "number",
                    "format": "float",
                    "x-go-name": "Price"
                },
                "published": {
                    "type": "boolean",
                    "x-go-name": "Published"
                },
                "quantity": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Quantity"
                },
                "sizes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Sizes"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Tags"
                },
                "unlimited": {
                    "type": "boolean",
                    "x-go-name": "Unlimited"
                },
                "url": {
                    "type": "string",
                    "x-go-name": "Url"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ItemList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Item"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ItemMedia": {
            "type": "object",
            "properties": {
                "avatar_full": {
                    "type": "string",
                    "x-go-name": "AvatarFull"
                },
                "avatar_medium": {
                    "type": "string",
                    "x-go-name": "AvatarMedium"
                },
                "avatar_small": {
                    "type": "string",
                    "x-go-name": "AvatarSmall"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "JoinCheck": {
            "type": "object",
            "properties": {
                "allowed_team_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "AllowedTeamTypes"
                },
                "blacklist_geo_countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "BlackListGeoCountries"
                },
                "join_policy": {
                    "type": "string",
                    "x-go-name": "JoinPolicy"
                },
                "max_skill_level": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxSkillLevel"
                },
                "membership_type": {
                    "type": "string",
                    "x-go-name": "MembershipType"
                },
                "min_skill_level": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MinSkillLevel"
                },
                "whitelist_geo_countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "WhitelistGeoCountries"
                },
                "whitelist_geo_countries_min_players": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "WhitelistGeoCountriesMinPlayers"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "JoinType": {
            "type": "object",
            "properties": {
                "maxParty": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxParty"
                },
                "party": {
                    "type": "boolean",
                    "x-go-name": "Party"
                },
                "premade": {
                    "type": "boolean",
                    "x-go-name": "Premade"
                },
                "solo": {
                    "type": "boolean",
                    "x-go-name": "Solo"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Leaderboard": {
            "type": "object",
            "properties": {
                "competition_id": {
                    "type": "string",
                    "x-go-name": "CompetitionID"
                },
                "competition_type": {
                    "type": "string",
                    "x-go-name": "CompetitionType"
                },
                "end_date": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "EndDate"
                },
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "group": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Group"
                },
                "leaderboard_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "leaderboard_mode": {
                    "type": "string",
                    "x-go-name": "LeaderboardMode"
                },
                "leaderboard_name": {
                    "type": "string",
                    "x-go-name": "LeaderboardName"
                },
                "leaderboard_type": {
                    "type": "string",
                    "x-go-name": "LeaderboardType"
                },
                "min_matches": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MinMatches"
                },
                "points_per_draw": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "PointsPerDraw"
                },
                "points_per_loss": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "PointsPerLoss"
                },
                "points_per_win": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "PointsPerWin"
                },
                "points_type": {
                    "type": "string",
                    "x-go-name": "PointsType"
                },
                "ranking_boost": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "RankingBoost"
                },
                "ranking_type": {
                    "type": "string",
                    "x-go-name": "RankingType"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "round": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Round"
                },
                "season": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Season"
                },
                "start_date": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "StartDate"
                },
                "starting_points": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "StartingPoints"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "LeaderboardConfig": {
            "type": "object",
            "properties": {
                "max_players": {
                    "description": "Max players in the leaderboard.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxPlayers"
                },
                "points_per_loss": {
                    "description": "User will lose this amount of points if they lose a match",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "PointsPerLoss",
                    "example": -2
                },
                "points_per_win": {
                    "description": "User will gain this amount of points if they win a match. When not configured, it's using the global value which is 3",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "PointsPerWin",
                    "example": 10
                },
                "promotion": {
                    "$ref": "#/definitions/Promotion"
                },
                "relegation": {
                    "$ref": "#/definitions/Relegation"
                },
                "starting_points": {
                    "description": "Starting points for a player.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "StartingPoints"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "LeaderboardsList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Leaderboard"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "League": {
            "description": "The League holds league information.",
            "type": "object",
            "title": "League Model",
            "properties": {
                "divisions": {
                    "description": "The divisions of the league.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Division"
                    },
                    "x-go-name": "Divisions"
                },
                "game": {
                    "description": "The game of the league.",
                    "type": "string",
                    "x-go-name": "Game"
                },
                "id": {
                    "description": "The id of the league.",
                    "type": "string",
                    "x-go-name": "Id"
                },
                "min_matches": {
                    "description": "The minimum matches of the league.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MinMatches"
                },
                "region": {
                    "description": "The region of the league.",
                    "type": "string",
                    "x-go-name": "Region"
                },
                "season": {
                    "$ref": "#/definitions/Season"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "ListResponse": {
            "description": "Volume list response",
            "type": "object",
            "title": "ListResponse VolumeListResponse",
            "properties": {
                "Volumes": {
                    "description": "List of volumes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Volume"
                    }
                },
                "Warnings": {
                    "description": "Warnings that occurred when fetching the list of volumes.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "Match": {
            "type": "object",
            "properties": {
                "best_of": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "BestOf"
                },
                "broadcast_start_time": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "BroadcastStartTime"
                },
                "broadcast_start_time_label": {
                    "type": "string",
                    "x-go-name": "BroadcastStartTimeLabel"
                },
                "calculate_elo": {
                    "type": "boolean",
                    "x-go-name": "CalculateElo"
                },
                "chat_room_id": {
                    "type": "string",
                    "x-go-name": "ChatID"
                },
                "competition_id": {
                    "type": "string",
                    "x-go-name": "CompetitionID"
                },
                "competition_name": {
                    "type": "string",
                    "x-go-name": "CompetitionName"
                },
                "competition_type": {
                    "type": "string",
                    "x-go-name": "CompetitionType"
                },
                "configured_at": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "ConfiguredAt"
                },
                "demo_url": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "DemoURL"
                },
                "detailed_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DetailedMatchResult"
                    },
                    "x-go-name": "DetailedResults"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "finished_at": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "FinishedAt"
                },
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "group": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Group"
                },
                "match_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "OrganizerID"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "results": {
                    "$ref": "#/definitions/MatchResult"
                },
                "round": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Round"
                },
                "scheduled_at": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "ScheduledAt"
                },
                "started_at": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "StartedAt"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                },
                "teams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Faction"
                    },
                    "x-go-name": "Teams"
                },
                "version": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Version"
                },
                "voting": {
                    "x-go-name": "Voting"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "MatchHistory": {
            "type": "object",
            "properties": {
                "competition_id": {
                    "type": "string",
                    "x-go-name": "CompetitionID"
                },
                "competition_name": {
                    "type": "string",
                    "x-go-name": "CompetitionName"
                },
                "competition_type": {
                    "type": "string",
                    "x-go-name": "CompetitionType"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "finished_at": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "FinishedAt"
                },
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "game_mode": {
                    "type": "string",
                    "x-go-name": "GameMode"
                },
                "match_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "match_type": {
                    "type": "string",
                    "x-go-name": "MatchType"
                },
                "max_players": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxPlayers"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "OrganizerID"
                },
                "playing_players": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "PlayingPlayers"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "results": {
                    "$ref": "#/definitions/MatchResult"
                },
                "started_at": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "StartedAt"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                },
                "teams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/HistoryFaction"
                    },
                    "x-go-name": "Teams"
                },
                "teams_size": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "TeamSize"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "MatchHistoryList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "from": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "From"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MatchHistory"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                },
                "to": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "To"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "MatchHistoryPlayer": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "game_player_id": {
                    "type": "string",
                    "x-go-name": "GamePlayerID"
                },
                "game_player_name": {
                    "type": "string",
                    "x-go-name": "GamePlayerName"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "player_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "skill_level": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SkillLevel"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "MatchList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Match"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "MatchResult": {
            "type": "object",
            "properties": {
                "score": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "x-go-name": "Score"
                },
                "winner": {
                    "type": "string",
                    "x-go-name": "Winner"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "MatchStats": {
            "type": "object",
            "properties": {
                "rounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoundStats"
                    },
                    "x-go-name": "Rounds"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Matchmaking": {
            "description": "Matchmaking A detailed representation of a matchmaking",
            "type": "object",
            "properties": {
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "icon": {
                    "type": "string",
                    "x-go-name": "Icon"
                },
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                },
                "league_id": {
                    "type": "string",
                    "x-go-name": "LeagueId"
                },
                "long_description": {
                    "type": "string",
                    "x-go-name": "LongDescription"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "queues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MatchmakingQueue"
                    },
                    "x-go-name": "Queues"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "short_description": {
                    "type": "string",
                    "x-go-name": "ShortDescription"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "MatchmakingList": {
            "description": "MatchmakingList A list of matchmaking objects",
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MatchmakingSlim"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "MatchmakingQueue": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "open": {
                    "type": "boolean",
                    "x-go-name": "Open"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "OrganizerId"
                },
                "paused": {
                    "type": "boolean",
                    "x-go-name": "Paused"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "MatchmakingSlim": {
            "description": "MatchmakingSlim A slim representation of a matchmaking",
            "type": "object",
            "properties": {
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "has_league": {
                    "type": "boolean",
                    "x-go-name": "HasLeague"
                },
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Meta": {
            "type": "object",
            "title": "Meta is a base object inherited by most of the other once.",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "Version": {
                    "$ref": "#/definitions/Version"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/swarm"
        },
        "Order": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "CreatedAt"
                },
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                },
                "item": {
                    "$ref": "#/definitions/OrderItem"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "UpdatedAt"
                },
                "user": {
                    "$ref": "#/definitions/OrderUser"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "OrderItem": {
            "type": "object",
            "properties": {
                "external_id": {
                    "type": "string",
                    "x-go-name": "ExternalId"
                },
                "image_url": {
                    "type": "string",
                    "x-go-name": "ImageUrl"
                },
                "item_id": {
                    "type": "string",
                    "x-go-name": "ItemId"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "price": {
                    "type": "number",
                    "format": "float",
                    "x-go-name": "Price"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "OrderList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Order"
                    },
                    "x-go-name": "Orders"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "OrderUser": {
            "type": "object",
            "properties": {
                "external_id": {
                    "type": "string",
                    "x-go-name": "ExternalId"
                },
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Organizer": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "cover": {
                    "type": "string",
                    "x-go-name": "Cover"
                },
                "description": {
                    "type": "string",
                    "x-go-name": "Description"
                },
                "facebook": {
                    "type": "string",
                    "x-go-name": "Facebook"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "followers_count": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "FollowersCount"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "twitch": {
                    "type": "string",
                    "x-go-name": "Twitch"
                },
                "twitter": {
                    "type": "string",
                    "x-go-name": "Twitter"
                },
                "type": {
                    "type": "string",
                    "x-go-name": "Type"
                },
                "vk": {
                    "type": "string",
                    "x-go-name": "Vk"
                },
                "website": {
                    "type": "string",
                    "x-go-name": "Website"
                },
                "youtube": {
                    "type": "string",
                    "x-go-name": "Youtube"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "OrganizerSearch": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "x-go-name": "Active"
                },
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Countries"
                },
                "games": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Games"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "partner": {
                    "type": "boolean",
                    "x-go-name": "Partner"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Regions"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "OrganizersSearchList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizerSearch"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PaginationFields": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Placement": {
            "type": "object",
            "properties": {
                "division_name": {
                    "type": "string",
                    "x-go-name": "DivisionName"
                },
                "division_type": {
                    "type": "string",
                    "x-go-name": "DivisionType"
                },
                "ladder": {
                    "type": "string",
                    "x-go-name": "Ladder"
                },
                "matchmaking_id": {
                    "type": "string",
                    "x-go-name": "MatchmakingId"
                },
                "season_number": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SeasonNumber"
                },
                "tier_name": {
                    "type": "string",
                    "x-go-name": "TierName"
                },
                "tier_rank": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "TierRank"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Player": {
            "type": "object",
            "properties": {
                "activated_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "ActivatedAt"
                },
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "country": {
                    "type": "string",
                    "x-go-name": "Country"
                },
                "cover_featured_image": {
                    "description": "Deprecated: no more in use",
                    "type": "string",
                    "x-go-name": "CoverFeaturedImage"
                },
                "cover_image": {
                    "type": "string",
                    "x-go-name": "CoverImage"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "friends_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "FriendsIds"
                },
                "games": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/GameDetail"
                    },
                    "x-go-name": "Games"
                },
                "infractions": {
                    "description": "Deprecated: no more in use",
                    "x-go-name": "Infractions"
                },
                "membership_type": {
                    "description": "Deprecated: use memberships instead",
                    "type": "string",
                    "x-go-name": "MembershipType"
                },
                "memberships": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Memberships"
                },
                "new_steam_id": {
                    "type": "string",
                    "x-go-name": "NewSteamID"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "platforms": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "x-go-name": "Platforms"
                },
                "player_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "settings": {
                    "$ref": "#/definitions/UserSettings"
                },
                "steam_id_64": {
                    "type": "string",
                    "x-go-name": "SteamID64"
                },
                "steam_nickname": {
                    "type": "string",
                    "x-go-name": "SteamNickname"
                },
                "verified": {
                    "type": "boolean",
                    "x-go-name": "Verified"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PlayerBan": {
            "type": "object",
            "properties": {
                "ends_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "EndsAt"
                },
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "reason": {
                    "type": "string",
                    "x-go-name": "Reason"
                },
                "starts_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "StartsAt"
                },
                "type": {
                    "type": "string",
                    "x-go-name": "Type"
                },
                "user_id": {
                    "type": "string",
                    "x-go-name": "UserId"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PlayerBansList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PlayerBan"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PlayerGlobalRanking": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GlobalRanking"
                    },
                    "x-go-name": "Items"
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Position"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PlayerInLeague": {
            "description": "PlayerInLeague holds information about a player in a league.",
            "type": "object",
            "title": "PlayerInLeague Model",
            "properties": {
                "division_name": {
                    "description": "The division name that the player is in.",
                    "type": "string",
                    "x-go-name": "DivisionName"
                },
                "division_tier": {
                    "description": "The division tier that the player is in.",
                    "type": "string",
                    "x-go-name": "DivisionTier"
                },
                "division_type": {
                    "description": "The division type that the player is in.",
                    "type": "string",
                    "x-go-name": "DivisionType"
                },
                "leaderboard_id": {
                    "description": "The leaderboard id that the player is in.",
                    "type": "string",
                    "x-go-name": "LeaderboardId"
                },
                "points": {
                    "description": "The points of the player in the leaderboard.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Points"
                },
                "position": {
                    "description": "The position of the player in the leaderboard.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Position"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PlayerStats": {
            "type": "object",
            "properties": {
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "lifetime": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-go-name": "Lifetime"
                },
                "player_id": {
                    "type": "string",
                    "x-go-name": "PlayerID"
                },
                "segments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "x-go-name": "Segments"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PlayerStatsForMatch": {
            "type": "object",
            "properties": {
                "stats": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-go-name": "Stats"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PlayerStatsForMatchesList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PlayerStatsForMatch"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PlayerStatsSimple": {
            "type": "object",
            "properties": {
                "nickname": {
                    "x-go-name": "Nickname"
                },
                "player_id": {
                    "x-go-name": "PlayerID"
                },
                "player_stats": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-go-name": "PlayerStats"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Plugin": {
            "description": "Plugin A plugin for the Engine API",
            "type": "object",
            "required": [
                "Config",
                "Enabled",
                "Name",
                "Settings"
            ],
            "properties": {
                "Config": {
                    "$ref": "#/definitions/PluginConfig"
                },
                "Enabled": {
                    "description": "True if the plugin is running. False if the plugin is not running, only installed.",
                    "type": "boolean"
                },
                "Id": {
                    "description": "Id",
                    "type": "string",
                    "x-go-name": "ID"
                },
                "Name": {
                    "description": "name",
                    "type": "string"
                },
                "PluginReference": {
                    "description": "plugin remote reference used to push/pull the plugin",
                    "type": "string"
                },
                "Settings": {
                    "$ref": "#/definitions/PluginSettings"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginConfig": {
            "type": "object",
            "title": "PluginConfig The config of a plugin.",
            "required": [
                "Args",
                "Description",
                "Documentation",
                "Entrypoint",
                "Env",
                "Interface",
                "IpcHost",
                "Linux",
                "Mounts",
                "Network",
                "PidHost",
                "PropagatedMount",
                "WorkDir"
            ],
            "properties": {
                "Args": {
                    "$ref": "#/definitions/PluginConfigArgs"
                },
                "Description": {
                    "description": "description",
                    "type": "string"
                },
                "DockerVersion": {
                    "description": "Docker Version used to create the plugin",
                    "type": "string"
                },
                "Documentation": {
                    "description": "documentation",
                    "type": "string"
                },
                "Entrypoint": {
                    "description": "entrypoint",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Env": {
                    "description": "env",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PluginEnv"
                    }
                },
                "Interface": {
                    "$ref": "#/definitions/PluginConfigInterface"
                },
                "IpcHost": {
                    "description": "ipc host",
                    "type": "boolean"
                },
                "Linux": {
                    "$ref": "#/definitions/PluginConfigLinux"
                },
                "Mounts": {
                    "description": "mounts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PluginMount"
                    }
                },
                "Network": {
                    "$ref": "#/definitions/PluginConfigNetwork"
                },
                "PidHost": {
                    "description": "pid host",
                    "type": "boolean"
                },
                "PropagatedMount": {
                    "description": "propagated mount",
                    "type": "string"
                },
                "User": {
                    "$ref": "#/definitions/PluginConfigUser"
                },
                "WorkDir": {
                    "description": "work dir",
                    "type": "string"
                },
                "rootfs": {
                    "$ref": "#/definitions/PluginConfigRootfs"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginConfigArgs": {
            "description": "PluginConfigArgs plugin config args",
            "type": "object",
            "required": [
                "Description",
                "Name",
                "Settable",
                "Value"
            ],
            "properties": {
                "Description": {
                    "description": "description",
                    "type": "string"
                },
                "Name": {
                    "description": "name",
                    "type": "string"
                },
                "Settable": {
                    "description": "settable",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Value": {
                    "description": "value",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginConfigInterface": {
            "description": "PluginConfigInterface The interface between Docker and the plugin",
            "type": "object",
            "required": [
                "Socket",
                "Types"
            ],
            "properties": {
                "ProtocolScheme": {
                    "description": "Protocol to use for clients connecting to the plugin.",
                    "type": "string"
                },
                "Socket": {
                    "description": "socket",
                    "type": "string"
                },
                "Types": {
                    "description": "types",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PluginInterfaceType"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginConfigLinux": {
            "description": "PluginConfigLinux plugin config linux",
            "type": "object",
            "required": [
                "AllowAllDevices",
                "Capabilities",
                "Devices"
            ],
            "properties": {
                "AllowAllDevices": {
                    "description": "allow all devices",
                    "type": "boolean"
                },
                "Capabilities": {
                    "description": "capabilities",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Devices": {
                    "description": "devices",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PluginDevice"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginConfigNetwork": {
            "description": "PluginConfigNetwork plugin config network",
            "type": "object",
            "required": [
                "Type"
            ],
            "properties": {
                "Type": {
                    "description": "type",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginConfigRootfs": {
            "description": "PluginConfigRootfs plugin config rootfs",
            "type": "object",
            "properties": {
                "diff_ids": {
                    "description": "diff ids",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "DiffIds"
                },
                "type": {
                    "description": "type",
                    "type": "string",
                    "x-go-name": "Type"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginConfigUser": {
            "description": "PluginConfigUser plugin config user",
            "type": "object",
            "properties": {
                "GID": {
                    "description": "g ID",
                    "type": "integer",
                    "format": "uint32"
                },
                "UID": {
                    "description": "UID",
                    "type": "integer",
                    "format": "uint32"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginDevice": {
            "description": "PluginDevice plugin device",
            "type": "object",
            "required": [
                "Description",
                "Name",
                "Path",
                "Settable"
            ],
            "properties": {
                "Description": {
                    "description": "description",
                    "type": "string"
                },
                "Name": {
                    "description": "name",
                    "type": "string"
                },
                "Path": {
                    "description": "path",
                    "type": "string"
                },
                "Settable": {
                    "description": "settable",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginEnv": {
            "description": "PluginEnv plugin env",
            "type": "object",
            "required": [
                "Description",
                "Name",
                "Settable",
                "Value"
            ],
            "properties": {
                "Description": {
                    "description": "description",
                    "type": "string"
                },
                "Name": {
                    "description": "name",
                    "type": "string"
                },
                "Settable": {
                    "description": "settable",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Value": {
                    "description": "value",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginInterfaceType": {
            "description": "PluginInterfaceType plugin interface type",
            "type": "object",
            "required": [
                "Capability",
                "Prefix",
                "Version"
            ],
            "properties": {
                "Capability": {
                    "description": "capability",
                    "type": "string"
                },
                "Prefix": {
                    "description": "prefix",
                    "type": "string"
                },
                "Version": {
                    "description": "version",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginMount": {
            "description": "PluginMount plugin mount",
            "type": "object",
            "required": [
                "Description",
                "Destination",
                "Name",
                "Options",
                "Settable",
                "Source",
                "Type"
            ],
            "properties": {
                "Description": {
                    "description": "description",
                    "type": "string"
                },
                "Destination": {
                    "description": "destination",
                    "type": "string"
                },
                "Name": {
                    "description": "name",
                    "type": "string"
                },
                "Options": {
                    "description": "options",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Settable": {
                    "description": "settable",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Source": {
                    "description": "source",
                    "type": "string"
                },
                "Type": {
                    "description": "type",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "PluginSettings": {
            "type": "object",
            "title": "PluginSettings Settings that can be modified by users.",
            "required": [
                "Args",
                "Devices",
                "Env",
                "Mounts"
            ],
            "properties": {
                "Args": {
                    "description": "args",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Devices": {
                    "description": "devices",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PluginDevice"
                    }
                },
                "Env": {
                    "description": "env",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Mounts": {
                    "description": "mounts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PluginMount"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "Port": {
            "description": "Port An open port on a container",
            "type": "object",
            "required": [
                "PrivatePort",
                "Type"
            ],
            "properties": {
                "IP": {
                    "description": "Host IP address that the container's port is mapped to",
                    "type": "string"
                },
                "PrivatePort": {
                    "description": "Port on the container",
                    "type": "integer",
                    "format": "uint16"
                },
                "PublicPort": {
                    "description": "Port exposed on the host",
                    "type": "integer",
                    "format": "uint16"
                },
                "Type": {
                    "description": "type",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "Prize": {
            "type": "object",
            "properties": {
                "faceit_points": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "FaceitPoints"
                },
                "rank": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Rank"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Promotion": {
            "description": "Promotion holds information about what is required in order for a player to be promoted to the next tier.",
            "type": "object",
            "title": "Promotion Model",
            "properties": {
                "points": {
                    "description": "Points needed for a player to get promoted.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Points",
                    "example": 10
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "PublishState": {
            "description": "PublishState represents the state of a Volume as it pertains to its\nuse on a particular Node.",
            "type": "string",
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "PublishStatus": {
            "description": "PublishStatus represents the status of the volume as published to an\nindividual node",
            "type": "object",
            "properties": {
                "NodeID": {
                    "description": "NodeID is the ID of the swarm node this Volume is published to.",
                    "type": "string"
                },
                "PublishContext": {
                    "description": "PublishContext is the PublishContext returned by the CSI plugin when\na volume is published.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "State": {
                    "$ref": "#/definitions/PublishState"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "Queue": {
            "type": "object",
            "properties": {
                "adminTool": {
                    "type": "boolean",
                    "x-go-name": "AdminTool"
                },
                "anticheatRequired": {
                    "type": "boolean",
                    "x-go-name": "AnticheatRequired"
                },
                "calculateElo": {
                    "type": "boolean",
                    "x-go-name": "CalculateElo"
                },
                "captainSelection": {
                    "type": "string",
                    "x-go-name": "CaptainSelection"
                },
                "checkIn": {
                    "$ref": "#/definitions/CheckIn"
                },
                "entityId": {
                    "type": "string",
                    "x-go-name": "EntityId"
                },
                "entityType": {
                    "type": "string",
                    "x-go-name": "EntityType"
                },
                "fbiManagement": {
                    "type": "boolean",
                    "x-go-name": "FbiManagement"
                },
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "groupSimilar": {
                    "type": "boolean",
                    "x-go-name": "GroupSimilar"
                },
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                },
                "joinType": {
                    "$ref": "#/definitions/JoinType"
                },
                "lastModified": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "LastModified"
                },
                "maxSkill": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxSkill"
                },
                "minSkill": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MinSkill"
                },
                "noOfPlayers": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NoOfPlayers"
                },
                "open": {
                    "type": "boolean",
                    "x-go-name": "Open"
                },
                "organizerId": {
                    "type": "string",
                    "x-go-name": "OrganizerId"
                },
                "paused": {
                    "type": "boolean",
                    "x-go-name": "Paused"
                },
                "queueAlgorithm": {
                    "$ref": "#/definitions/QueueAlgorithm"
                },
                "queueName": {
                    "type": "string",
                    "x-go-name": "QueueName"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "state": {
                    "type": "string",
                    "x-go-name": "State"
                },
                "verifiedMatching": {
                    "type": "boolean",
                    "x-go-name": "VerifiedMatching"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "QueueAlgorithm": {
            "type": "object",
            "properties": {
                "algorithmId": {
                    "type": "string",
                    "x-go-name": "AlgorithmId"
                },
                "algorithmInput": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "AlgorithmInput"
                },
                "algorithmParameters": {
                    "$ref": "#/definitions/AlgorithmParameters"
                },
                "geoDescription": {
                    "$ref": "#/definitions/GeoDescription"
                },
                "geoLabel": {
                    "$ref": "#/definitions/GeoLabel"
                },
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                },
                "roleBasedCaptainPick": {
                    "type": "boolean",
                    "x-go-name": "RoleBasedCaptainPick"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "QueueBan": {
            "type": "object",
            "properties": {
                "banEnd": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "BanEnd"
                },
                "banId": {
                    "type": "string",
                    "x-go-name": "Id"
                },
                "banStart": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "BanStart"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "CreatedAt"
                },
                "entityId": {
                    "type": "string",
                    "x-go-name": "EntityId"
                },
                "entityType": {
                    "type": "string",
                    "x-go-name": "EntityType"
                },
                "expired": {
                    "type": "boolean",
                    "x-go-name": "Expired"
                },
                "lastModified": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "LastModified"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "organizerId": {
                    "type": "string",
                    "x-go-name": "OrganizerId"
                },
                "queueId": {
                    "type": "string",
                    "x-go-name": "QueueId"
                },
                "reason": {
                    "type": "string",
                    "x-go-name": "Reason"
                },
                "type": {
                    "type": "string",
                    "x-go-name": "Type"
                },
                "userId": {
                    "type": "string",
                    "x-go-name": "UserId"
                },
                "version": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Version"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "QueueBansList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QueueBan"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "QueueSimple": {
            "type": "object",
            "properties": {
                "entityId": {
                    "type": "string",
                    "x-go-name": "EntityId"
                },
                "entityType": {
                    "type": "string",
                    "x-go-name": "EntityType"
                },
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "id": {
                    "type": "string",
                    "x-go-name": "Id"
                },
                "lastModified": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "LastModified"
                },
                "open": {
                    "type": "boolean",
                    "x-go-name": "Open"
                },
                "organizerId": {
                    "type": "string",
                    "x-go-name": "OrganizerId"
                },
                "queueName": {
                    "type": "string",
                    "x-go-name": "QueueName"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "state": {
                    "type": "string",
                    "x-go-name": "State"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "QueuesList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QueueSimple"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Ranking": {
            "type": "object",
            "properties": {
                "current_streak": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "CurrentStreak"
                },
                "draw": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Draw"
                },
                "lost": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Lost"
                },
                "played": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Played"
                },
                "player": {
                    "$ref": "#/definitions/UserSimple"
                },
                "points": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Points"
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Position"
                },
                "win_rate": {
                    "type": "number",
                    "format": "double",
                    "x-go-name": "WinRate"
                },
                "won": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Won"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Relegation": {
            "description": "Relegation holds information about what is required in order for a player to be relegated to the previous tier.",
            "type": "object",
            "title": "Relegation Model",
            "properties": {
                "consecutive_losses": {
                    "description": "Consecutive losses needed for a player to get relegated to the previous tier.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "ConsecutiveLosses",
                    "example": 3
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Role": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string",
                    "x-go-name": "Color"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "ranking": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Ranking"
                },
                "role_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "visible_on_chat": {
                    "type": "boolean",
                    "x-go-name": "VisibleOnChat"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "RolesList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Role"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Roster": {
            "type": "object",
            "properties": {
                "anticheat_required": {
                    "type": "boolean",
                    "x-go-name": "AnticheatRequired"
                },
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "game_player_id": {
                    "type": "string",
                    "x-go-name": "GamePlayerID"
                },
                "game_player_name": {
                    "type": "string",
                    "x-go-name": "GamePlayerName"
                },
                "game_skill_level": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "GameSkillLevel"
                },
                "membership": {
                    "type": "string",
                    "x-go-name": "Membership"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "player_id": {
                    "type": "string",
                    "x-go-name": "ID"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "RoundStats": {
            "type": "object",
            "properties": {
                "best_of": {
                    "x-go-name": "BestOf"
                },
                "competition_id": {
                    "x-go-name": "CompetitionID"
                },
                "game_id": {
                    "x-go-name": "GameID"
                },
                "game_mode": {
                    "x-go-name": "GameMode"
                },
                "match_id": {
                    "x-go-name": "MatchID"
                },
                "match_round": {
                    "x-go-name": "MatchRound"
                },
                "played": {
                    "x-go-name": "Played"
                },
                "round_stats": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-go-name": "RoundStats"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamStatsSimple"
                    },
                    "x-go-name": "Teams"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Rules": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string",
                    "x-go-name": "Body"
                },
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "organizer": {
                    "type": "string",
                    "x-go-name": "Organizer"
                },
                "rule_id": {
                    "type": "string",
                    "x-go-name": "ID"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Scope": {
            "description": "Scope defines the Scope of a Cluster Volume. This is how many nodes a\nVolume can be accessed simultaneously on.",
            "type": "string",
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "Season": {
            "description": "Season holds information about a league season. When no older season is requested, this field holds information about the season of the league.",
            "type": "object",
            "title": "Season Model",
            "properties": {
                "end_date": {
                    "description": "The end date of the season.",
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "EndDate"
                },
                "number": {
                    "description": "The season number.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Number"
                },
                "placement_match_count": {
                    "description": "The placement match mount.",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "PlacementMatchCount"
                },
                "start_date": {
                    "description": "The start date of the season.",
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "StartDate"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "SeasonDetailed": {
            "type": "object",
            "properties": {
                "divisions": {
                    "description": "The divisions of the given season.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Division"
                    },
                    "x-go-name": "Divisions"
                },
                "season": {
                    "$ref": "#/definitions/Season"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Secret": {
            "description": "Secret represents a Swarm Secret value that must be passed to the CSI\nstorage plugin when operating on this Volume. It represents one key-value\npair of possibly many.",
            "type": "object",
            "properties": {
                "Key": {
                    "description": "Key is the name of the key of the key-value pair passed to the plugin.",
                    "type": "string"
                },
                "Secret": {
                    "description": "Secret is the swarm Secret object from which to read data. This can be a\nSecret name or ID. The Secret data is retrieved by Swarm and used as the\nvalue of the key-value pair passed to the plugin.",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "ServiceUpdateResponse": {
            "description": "ServiceUpdateResponse service update response",
            "type": "object",
            "properties": {
                "Warnings": {
                    "description": "Optional warning messages",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types"
        },
        "SharingMode": {
            "description": "SharingMode defines the Sharing of a Cluster Volume. This is how Tasks using a\nVolume at the same time can use it.",
            "type": "string",
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "SpacePlayer": {
            "type": "object",
            "properties": {
                "activated_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-go-name": "ActivatedAt"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "birth_date": {
                    "$ref": "#/definitions/BirthDate"
                },
                "country": {
                    "type": "string",
                    "x-go-name": "Country"
                },
                "cover_featured_image": {
                    "description": "Deprecated: no more in use",
                    "type": "string",
                    "x-go-name": "CoverFeaturedImage"
                },
                "cover_image": {
                    "type": "string",
                    "x-go-name": "CoverImage"
                },
                "email": {
                    "type": "string",
                    "x-go-name": "Email"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "first_name": {
                    "type": "string",
                    "x-go-name": "FirstName"
                },
                "friends_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "FriendsIds"
                },
                "games": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/GameDetail"
                    },
                    "x-go-name": "Games"
                },
                "infractions": {
                    "description": "Deprecated: no more in use",
                    "x-go-name": "Infractions"
                },
                "last_name": {
                    "type": "string",
                    "x-go-name": "LastName"
                },
                "membership_type": {
                    "description": "Deprecated: use memberships instead",
                    "type": "string",
                    "x-go-name": "MembershipType"
                },
                "memberships": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Memberships"
                },
                "new_steam_id": {
                    "type": "string",
                    "x-go-name": "NewSteamID"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "platforms": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "x-go-name": "Platforms"
                },
                "player_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "settings": {
                    "$ref": "#/definitions/UserSettings"
                },
                "steam_id_64": {
                    "type": "string",
                    "x-go-name": "SteamID64"
                },
                "steam_nickname": {
                    "type": "string",
                    "x-go-name": "SteamNickname"
                },
                "verified": {
                    "type": "boolean",
                    "x-go-name": "Verified"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Stats": {
            "type": "object",
            "properties": {
                "rating": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Rating"
                },
                "skillLevel": {
                    "type": "object",
                    "properties": {
                        "average": {
                            "type": "integer",
                            "format": "int64",
                            "x-go-name": "Average"
                        },
                        "range": {
                            "type": "object",
                            "properties": {
                                "max": {
                                    "type": "integer",
                                    "format": "int64",
                                    "x-go-name": "Max"
                                },
                                "min": {
                                    "type": "integer",
                                    "format": "int64",
                                    "x-go-name": "Min"
                                }
                            },
                            "x-go-name": "Range"
                        }
                    },
                    "x-go-name": "SkillLevel"
                },
                "winProbability": {
                    "type": "number",
                    "format": "double",
                    "x-go-name": "WinProbability"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "StatsCompetitionPlayer": {
            "type": "object",
            "properties": {
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "player_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "stats": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-go-name": "Stats"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "SubstitutionConfiguration": {
            "type": "object",
            "properties": {
                "max_substitutes": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxSubstitutes"
                },
                "max_substitutions": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxSubstitutions"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Team": {
            "description": "The Team holds information about a team.",
            "type": "object",
            "title": "Team Model",
            "properties": {
                "avatar": {
                    "description": "The Avatar of a team",
                    "type": "string",
                    "x-go-name": "Avatar",
                    "example": "https://avatar.jpg"
                },
                "chat_room_id": {
                    "description": "The ChatID of a team",
                    "type": "string",
                    "x-go-name": "ChatID",
                    "example": "team-6204037c-30e6-408b-8aaa-dd8219860b4b"
                },
                "cover_image": {
                    "description": "The CoverImage of a team",
                    "type": "string",
                    "x-go-name": "CoverImage",
                    "example": "https://cover-image.jpg"
                },
                "description": {
                    "description": "The Description of a team",
                    "type": "string",
                    "x-go-name": "Description",
                    "example": "Some description"
                },
                "facebook": {
                    "description": "The Facebook of a team",
                    "type": "string",
                    "x-go-name": "Facebook",
                    "example": "https://facebook/team"
                },
                "faceit_url": {
                    "description": "The FaceitUrl of a team",
                    "type": "string",
                    "x-go-name": "FaceitUrl",
                    "example": "https://www.faceit.com/{lang}/teams/6204037c-30e6-408b-8aaa-dd8219860b4b"
                },
                "game": {
                    "description": "The Game of a team",
                    "type": "string",
                    "x-go-name": "Game",
                    "example": "csgo"
                },
                "leader": {
                    "description": "The Leader of a team",
                    "type": "string",
                    "x-go-name": "Leader",
                    "example": "leader"
                },
                "members": {
                    "description": "The Members of a team\n\nCan be empty if not supported",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserSimple"
                    },
                    "x-go-name": "Members"
                },
                "name": {
                    "description": "The Name of a team",
                    "type": "string",
                    "x-go-name": "Name",
                    "example": "name"
                },
                "nickname": {
                    "description": "The Nickname of a team",
                    "type": "string",
                    "x-go-name": "Nickname",
                    "example": "nickname"
                },
                "team_id": {
                    "description": "The ID of a team",
                    "type": "string",
                    "x-go-name": "ID",
                    "example": "6204037c-30e6-408b-8aaa-dd8219860b4b"
                },
                "team_type": {
                    "description": "The TeamType of a team",
                    "type": "string",
                    "x-go-name": "TeamType",
                    "example": "premade"
                },
                "twitter": {
                    "description": "The Twitter of a team",
                    "type": "string",
                    "x-go-name": "Twitter",
                    "example": "https://twitter/team"
                },
                "website": {
                    "description": "The Website of a team",
                    "type": "string",
                    "x-go-name": "Website",
                    "example": "https://team.website"
                },
                "youtube": {
                    "description": "The Youtube of a team",
                    "type": "string",
                    "x-go-name": "Youtube",
                    "example": "https://youtube.com/team"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TeamList": {
            "description": "The TeamList holds teams information.",
            "type": "object",
            "title": "TeamList Model",
            "required": [
                "items"
            ],
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "description": "The teams list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Team"
                    },
                    "x-go-name": "Items",
                    "readOnly": true
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TeamSearch": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "chat_room_id": {
                    "type": "string",
                    "x-go-name": "ChatID"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "game": {
                    "type": "string",
                    "x-go-name": "Game"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "team_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "verified": {
                    "type": "boolean",
                    "x-go-name": "Verified"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TeamStats": {
            "type": "object",
            "properties": {
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "lifetime": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-go-name": "Lifetime"
                },
                "segments": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "x-go-name": "Segments"
                },
                "team_id": {
                    "type": "string",
                    "x-go-name": "TeamID"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TeamStatsSimple": {
            "type": "object",
            "properties": {
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PlayerStatsSimple"
                    },
                    "x-go-name": "Players"
                },
                "premade": {
                    "x-go-name": "Premade"
                },
                "team_id": {
                    "x-go-name": "TeamID"
                },
                "team_stats": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-go-name": "TeamStats"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TeamsSearchList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamSearch"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Tier": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the tier",
                    "type": "string",
                    "x-go-name": "Name"
                },
                "points_target": {
                    "description": "The target points for the tier",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Points"
                },
                "rank": {
                    "description": "The rank of the tier",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Rank",
                    "example": 1
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Topology": {
            "description": "This description is taken verbatim from the CSI Spec:\n\nA topological domain is a sub-division of a cluster, like \"region\",\n\"zone\", \"rack\", etc.\nA topological segment is a specific instance of a topological domain,\nlike \"zone3\", \"rack3\", etc.\nFor example {\"com.company/zone\": \"Z1\", \"com.company/rack\": \"R3\"}\nValid keys have two segments: an OPTIONAL prefix and name, separated\nby a slash (/), for example: \"com.company.example/zone\".\nThe key name segment is REQUIRED. The prefix is OPTIONAL.\nThe key name MUST be 63 characters or less, begin and end with an\nalphanumeric character ([a-z0-9A-Z]), and contain only dashes (-),\nunderscores (_), dots (.), or alphanumerics in between, for example\n\"zone\".\nThe key prefix MUST be 63 characters or less, begin and end with a\nlower-case alphanumeric character ([a-z0-9]), contain only\ndashes (-), dots (.), or lower-case alphanumerics in between, and\nfollow domain name notation format\n(https://tools.ietf.org/html/rfc1035#section-2.3.1).\nThe key prefix SHOULD include the plugin's host company name and/or\nthe plugin name, to minimize the possibility of collisions with keys\nfrom other plugins.\nIf a key prefix is specified, it MUST be identical across all\ntopology keys returned by the SP (across all RPCs).\nKeys MUST be case-insensitive. Meaning the keys \"Zone\" and \"zone\"\nMUST not both exist.\nEach value (topological segment) MUST contain 1 or more strings.\nEach string MUST be 63 characters or less and begin and end with an\nalphanumeric character with '-', '_', '.', or alphanumerics in\nbetween.",
            "type": "object",
            "title": "Topology is a map of topological domains to topological segments.",
            "properties": {
                "Segments": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "TopologyRequirement": {
            "description": "TopologyRequirement expresses the user's requirements for a volume's\naccessible topology.",
            "type": "object",
            "properties": {
                "Preferred": {
                    "description": "Preferred is a list of Topologies that the volume should attempt to be\nprovisioned in.\n\nTaken from the CSI spec:\n\nSpecifies the list of topologies the CO would prefer the volume to\nbe provisioned in.\n\nThis field is OPTIONAL. If TopologyRequirement is specified either\nrequisite or preferred or both MUST be specified.\n\nAn SP MUST attempt to make the provisioned volume available using\nthe preferred topologies in order from first to last.\n\nIf requisite is specified, all topologies in preferred list MUST\nalso be present in the list of requisite topologies.\n\nIf the SP is unable to to make the provisioned volume available\nfrom any of the preferred topologies, the SP MAY choose a topology\nfrom the list of requisite topologies.\nIf the list of requisite topologies is not specified, then the SP\nMAY choose from the list of all possible topologies.\nIf the list of requisite topologies is specified and the SP is\nunable to to make the provisioned volume available from any of the\nrequisite topologies it MUST fail the CreateVolume call.\n\nExample 1:\nGiven a volume should be accessible from a single zone, and\nrequisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"}\npreferred =\n{\"region\": \"R1\", \"zone\": \"Z3\"}\nthen the the SP SHOULD first attempt to make the provisioned volume\navailable from \"zone\" \"Z3\" in the \"region\" \"R1\" and fall back to\n\"zone\" \"Z2\" in the \"region\" \"R1\" if that is not possible.\n\nExample 2:\nGiven a volume should be accessible from a single zone, and\nrequisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"},\n{\"region\": \"R1\", \"zone\": \"Z4\"},\n{\"region\": \"R1\", \"zone\": \"Z5\"}\npreferred =\n{\"region\": \"R1\", \"zone\": \"Z4\"},\n{\"region\": \"R1\", \"zone\": \"Z2\"}\nthen the the SP SHOULD first attempt to make the provisioned volume\naccessible from \"zone\" \"Z4\" in the \"region\" \"R1\" and fall back to\n\"zone\" \"Z2\" in the \"region\" \"R1\" if that is not possible. If that\nis not possible, the SP may choose between either the \"zone\"\n\"Z3\" or \"Z5\" in the \"region\" \"R1\".\n\nExample 3:\nGiven a volume should be accessible from TWO zones (because an\nopaque parameter in CreateVolumeRequest, for example, specifies\nthe volume is accessible from two zones, aka synchronously\nreplicated), and\nrequisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"},\n{\"region\": \"R1\", \"zone\": \"Z4\"},\n{\"region\": \"R1\", \"zone\": \"Z5\"}\npreferred =\n{\"region\": \"R1\", \"zone\": \"Z5\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"}\nthen the the SP SHOULD first attempt to make the provisioned volume\naccessible from the combination of the two \"zones\" \"Z5\" and \"Z3\" in\nthe \"region\" \"R1\". If that's not possible, it should fall back to\na combination of \"Z5\" and other possibilities from the list of\nrequisite. If that's not possible, it should fall back  to a\ncombination of \"Z3\" and other possibilities from the list of\nrequisite. If that's not possible, it should fall back  to a\ncombination of other possibilities from the list of requisite.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Topology"
                    }
                },
                "Requisite": {
                    "description": "Requisite specifies a list of Topologies, at least one of which the\nvolume must be accessible from.\n\nTaken verbatim from the CSI Spec:\n\nSpecifies the list of topologies the provisioned volume MUST be\naccessible from.\nThis field is OPTIONAL. If TopologyRequirement is specified either\nrequisite or preferred or both MUST be specified.\n\nIf requisite is specified, the provisioned volume MUST be\naccessible from at least one of the requisite topologies.\n\nGiven\nx = number of topologies provisioned volume is accessible from\nn = number of requisite topologies\nThe CO MUST ensure n \u003e= 1. The SP MUST ensure x \u003e= 1\nIf x==n, then the SP MUST make the provisioned volume available to\nall topologies from the list of requisite topologies. If it is\nunable to do so, the SP MUST fail the CreateVolume call.\nFor example, if a volume should be accessible from a single zone,\nand requisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"}\nthen the provisioned volume MUST be accessible from the \"region\"\n\"R1\" and the \"zone\" \"Z2\".\nSimilarly, if a volume should be accessible from two zones, and\nrequisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"}\nthen the provisioned volume MUST be accessible from the \"region\"\n\"R1\" and both \"zone\" \"Z2\" and \"zone\" \"Z3\".\n\nIf x\u003cn, then the SP SHALL choose x unique topologies from the list\nof requisite topologies. If it is unable to do so, the SP MUST fail\nthe CreateVolume call.\nFor example, if a volume should be accessible from a single zone,\nand requisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"}\nthen the SP may choose to make the provisioned volume available in\neither the \"zone\" \"Z2\" or the \"zone\" \"Z3\" in the \"region\" \"R1\".\nSimilarly, if a volume should be accessible from two zones, and\nrequisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"},\n{\"region\": \"R1\", \"zone\": \"Z3\"},\n{\"region\": \"R1\", \"zone\": \"Z4\"}\nthen the provisioned volume MUST be accessible from any combination\nof two unique topologies: e.g. \"R1/Z2\" and \"R1/Z3\", or \"R1/Z2\" and\n\"R1/Z4\", or \"R1/Z3\" and \"R1/Z4\".\n\nIf x\u003en, then the SP MUST make the provisioned volume available from\nall topologies from the list of requisite topologies and MAY choose\nthe remaining x-n unique topologies from the list of all possible\ntopologies. If it is unable to do so, the SP MUST fail the\nCreateVolume call.\nFor example, if a volume should be accessible from two zones, and\nrequisite =\n{\"region\": \"R1\", \"zone\": \"Z2\"}\nthen the provisioned volume MUST be accessible from the \"region\"\n\"R1\" and the \"zone\" \"Z2\" and the SP may select the second zone\nindependently, e.g. \"R1/Z4\".",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Topology"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "Tournament": {
            "type": "object",
            "properties": {
                "anticheat_required": {
                    "type": "boolean",
                    "x-go-name": "AnticheatRequired"
                },
                "best_of": {
                    "x-go-name": "BestOf"
                },
                "calculate_elo": {
                    "type": "boolean",
                    "x-go-name": "CalculateElo"
                },
                "competition_id": {
                    "description": "DEPRECATED: use tournament_id instead",
                    "type": "string",
                    "x-go-name": "IDdep"
                },
                "cover_image": {
                    "type": "string",
                    "x-go-name": "CoverImage"
                },
                "custom": {
                    "type": "boolean",
                    "x-go-name": "Custom"
                },
                "description": {
                    "type": "string",
                    "x-go-name": "Description"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "featured_image": {
                    "type": "string",
                    "x-go-name": "FeaturedImage"
                },
                "game_data": {
                    "$ref": "#/definitions/Game"
                },
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "invite_type": {
                    "type": "string",
                    "x-go-name": "InviteType"
                },
                "match_type": {
                    "type": "string",
                    "x-go-name": "MatchType"
                },
                "max_skill": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxSkill"
                },
                "membership_type": {
                    "type": "string",
                    "x-go-name": "MembershipType"
                },
                "min_skill": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MinSkill"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "number_of_players": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NumberOfPlayers"
                },
                "number_of_players_checkedin": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NumberOfPlayersCheckedIn"
                },
                "number_of_players_joined": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NumberOfPlayersJoined"
                },
                "number_of_players_participants": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NumberOfPlayersParticipants"
                },
                "organizer_data": {
                    "$ref": "#/definitions/Organizer"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "OrganizerID"
                },
                "prize_type": {
                    "type": "string",
                    "x-go-name": "PrizeType"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "rounds": {
                    "type": "array",
                    "items": {},
                    "x-go-name": "Rounds"
                },
                "rule": {
                    "type": "string",
                    "x-go-name": "Rule"
                },
                "started_at": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "StartedAt"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                },
                "substitutes_allowed": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SubstitutesAllowed"
                },
                "substitutions_allowed": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SubstitutionsAllowed"
                },
                "team_size": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "TeamSize"
                },
                "total_prize": {
                    "x-go-name": "TotalPrize"
                },
                "tournament_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "voting": {
                    "x-go-name": "Voting"
                },
                "whitelist_countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "WhitelistCountries"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TournamentSimple": {
            "type": "object",
            "properties": {
                "anticheat_required": {
                    "type": "boolean",
                    "x-go-name": "AnticheatRequired"
                },
                "custom": {
                    "type": "boolean",
                    "x-go-name": "Custom"
                },
                "faceit_url": {
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "featured_image": {
                    "type": "string",
                    "x-go-name": "FeaturedImage"
                },
                "game_id": {
                    "type": "string",
                    "x-go-name": "GameID"
                },
                "invite_type": {
                    "type": "string",
                    "x-go-name": "InviteType"
                },
                "match_type": {
                    "type": "string",
                    "x-go-name": "MatchType"
                },
                "max_skill": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MaxSkill"
                },
                "membership_type": {
                    "type": "string",
                    "x-go-name": "MembershipType"
                },
                "min_skill": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "MinSkill"
                },
                "name": {
                    "type": "string",
                    "x-go-name": "Name"
                },
                "number_of_players": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NumberOfPlayers"
                },
                "number_of_players_checkedin": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NumberOfPlayersCheckedIn"
                },
                "number_of_players_joined": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NumberOfPlayersJoined"
                },
                "number_of_players_participants": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "NumberOfPlayersParticipants"
                },
                "organizer_id": {
                    "type": "string",
                    "x-go-name": "OrganizerID"
                },
                "prize_type": {
                    "type": "string",
                    "x-go-name": "PrizeType"
                },
                "region": {
                    "type": "string",
                    "x-go-name": "Region"
                },
                "started_at": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "StartedAt"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                },
                "subscriptions_count": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SubscriptionsCount"
                },
                "team_size": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "TeamSize"
                },
                "total_prize": {
                    "x-go-name": "TotalPrize"
                },
                "tournament_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "whitelist_countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "WhitelistCountries"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TournamentTeam": {
            "type": "object",
            "properties": {
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "skill_level": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SkillLevel"
                },
                "subs_done": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SubsDone"
                },
                "team_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "team_leader": {
                    "type": "string",
                    "x-go-name": "TeamLeader"
                },
                "team_type": {
                    "type": "string",
                    "x-go-name": "TeamType"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TournamentTeams": {
            "type": "object",
            "properties": {
                "checked_in": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TournamentTeam"
                    },
                    "x-go-name": "CheckedIn"
                },
                "finished": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TournamentTeam"
                    },
                    "x-go-name": "Finished"
                },
                "joined": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TournamentTeam"
                    },
                    "x-go-name": "Joined"
                },
                "started": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TournamentTeam"
                    },
                    "x-go-name": "Started"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TournamentsList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TournamentSimple"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "TypeBlock": {
            "description": "Intentionally empty.",
            "type": "object",
            "title": "TypeBlock defines options for using a volume as a block-type volume.",
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "TypeMount": {
            "description": "TypeMount contains options for using a volume as a Mount-type\nvolume.",
            "type": "object",
            "properties": {
                "FsType": {
                    "description": "FsType specifies the filesystem type for the mount volume. Optional.",
                    "type": "string"
                },
                "MountFlags": {
                    "description": "MountFlags defines flags to pass when mounting the volume. Optional.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "UsageData": {
            "description": "UsageData Usage details about the volume. This information is used by the\n`GET /system/df` endpoint, and omitted in other endpoints.",
            "type": "object",
            "required": [
                "RefCount",
                "Size"
            ],
            "properties": {
                "RefCount": {
                    "description": "The number of containers referencing this volume. This field\nis set to `-1` if the reference-count is not available.",
                    "type": "integer",
                    "format": "int64"
                },
                "Size": {
                    "description": "Amount of disk space used by the volume (in bytes). This information\nis only available for volumes created with the `\"local\"` volume\ndriver. For volumes created with other volume drivers, this field\nis set to `-1` (\"not available\")",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "UserSearch": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "x-go-name": "Avatar"
                },
                "country": {
                    "type": "string",
                    "x-go-name": "Country"
                },
                "games": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GameUserSearch"
                    },
                    "x-go-name": "Games"
                },
                "nickname": {
                    "type": "string",
                    "x-go-name": "Nickname"
                },
                "player_id": {
                    "type": "string",
                    "x-go-name": "ID"
                },
                "status": {
                    "type": "string",
                    "x-go-name": "Status"
                },
                "verified": {
                    "type": "boolean",
                    "x-go-name": "Verified"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "UserSettings": {
            "type": "object",
            "properties": {
                "language": {
                    "type": "string",
                    "x-go-name": "Language"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "UserSimple": {
            "description": "The UserSimple holds information about a user.",
            "type": "object",
            "title": "UserSimple Model",
            "properties": {
                "avatar": {
                    "description": "The Avatar of a user",
                    "type": "string",
                    "x-go-name": "Avatar",
                    "example": "https://avatar.jpg"
                },
                "country": {
                    "description": "The Country of a user",
                    "type": "string",
                    "x-go-name": "Country",
                    "example": "GB"
                },
                "faceit_url": {
                    "description": "The FaceitUrl of a user",
                    "type": "string",
                    "x-go-name": "FaceitUrl"
                },
                "membership_type": {
                    "description": "Deprecated: use memberships instead",
                    "type": "string",
                    "x-go-name": "MembershipType"
                },
                "memberships": {
                    "description": "The Memberships of a user",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-go-name": "Memberships",
                    "example": [
                        "free",
                        "unlimited"
                    ]
                },
                "nickname": {
                    "description": "The Nickname of a user",
                    "type": "string",
                    "x-go-name": "Nickname",
                    "example": "nickname"
                },
                "skill_level": {
                    "description": "The SkillLevel of a user",
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "SkillLevel",
                    "example": 1
                },
                "user_id": {
                    "description": "The ID of a user",
                    "type": "string",
                    "x-go-name": "ID",
                    "example": "6204037c-30e6-408b-8aaa-dd8219860b4b"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "UsersSearchList": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "End"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserSearch"
                    },
                    "x-go-name": "Items"
                },
                "start": {
                    "type": "integer",
                    "format": "int64",
                    "x-go-name": "Start"
                }
            },
            "x-go-package": "github.com/faceit/open-data-api/models/externals"
        },
        "Version": {
            "type": "object",
            "title": "Version represents the internal object version.",
            "properties": {
                "Index": {
                    "type": "integer",
                    "format": "uint64"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/swarm"
        },
        "Volume": {
            "description": "Volume volume",
            "type": "object",
            "required": [
                "Driver",
                "Labels",
                "Mountpoint",
                "Name",
                "Options",
                "Scope"
            ],
            "properties": {
                "ClusterVolume": {
                    "$ref": "#/definitions/ClusterVolume"
                },
                "CreatedAt": {
                    "description": "Date/Time the volume was created.",
                    "type": "string"
                },
                "Driver": {
                    "description": "Name of the volume driver used by the volume.",
                    "type": "string"
                },
                "Labels": {
                    "description": "User-defined key/value metadata.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Mountpoint": {
                    "description": "Mount path of the volume on the host.",
                    "type": "string"
                },
                "Name": {
                    "description": "Name of the volume.",
                    "type": "string"
                },
                "Options": {
                    "description": "The driver specific options used when creating the volume.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Scope": {
                    "description": "The level at which the volume exists. Either `global` for cluster-wide,\nor `local` for machine level.",
                    "type": "string"
                },
                "Status": {
                    "description": "Low-level details about the volume, provided by the volume driver.\nDetails are returned as a map with key/value pairs:\n`{\"key\":\"value\",\"key2\":\"value2\"}`.\n\nThe `Status` field is optional, and is omitted if the volume driver\ndoes not support this feature.",
                    "type": "object",
                    "additionalProperties": {}
                },
                "UsageData": {
                    "$ref": "#/definitions/UsageData"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/volume"
        },
        "WaitExitError": {
            "description": "WaitExitError container waiting error, if any",
            "type": "object",
            "properties": {
                "Message": {
                    "description": "Details of an error",
                    "type": "string"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/container"
        },
        "WaitResponse": {
            "description": "OK response to ContainerWait operation",
            "type": "object",
            "title": "WaitResponse ContainerWaitResponse",
            "required": [
                "StatusCode"
            ],
            "properties": {
                "Error": {
                    "$ref": "#/definitions/WaitExitError"
                },
                "StatusCode": {
                    "description": "Exit code of the container",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-go-package": "github.com/docker/docker/api/types/container"
        }
    },
    "securityDefinitions": {
        "key": {
            "description": "API key Authorization",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "key": []
        }
    ]
}